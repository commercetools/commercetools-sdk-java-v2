#%RAML 1.0 Extension
usage: Adds JavaSDK extended functionality
extends: api.raml
annotationTypes:
  java-mixin:
    type: string
    allowedTargets: TypeDeclaration

types:
  BaseAddress:
    (java-extends): 'com.commercetools.api.models.WithKey'
    (java-mixin): |
      public default AddressDraft toDraft() {
          if (this instanceof AddressDraft) {
              return (AddressDraft) this;
          }
          return toDraftBuilder().build();
      }

      public default AddressDraftBuilder toDraftBuilder() {
          if (this instanceof AddressDraft) {
              return AddressDraft.builder((AddressDraft)this);
          }
          AddressDraftBuilder builder = AddressDraft.builder()
                  .key(this.getKey())
                  .country(this.getCountry())
                  .title(this.getTitle())
                  .salutation(this.getSalutation())
                  .firstName(this.getFirstName())
                  .lastName(this.getLastName())
                  .streetName(this.getStreetName())
                  .streetNumber(this.getStreetNumber())
                  .additionalStreetInfo(this.getAdditionalStreetInfo())
                  .postalCode(this.getPostalCode())
                  .city(this.getCity())
                  .region(this.getRegion())
                  .state(this.getState())
                  .company(this.getCompany())
                  .department(this.getDepartment())
                  .building(this.getBuilding())
                  .apartment(this.getApartment())
                  .pOBox(this.getPOBox())
                  .phone(this.getPhone())
                  .mobile(this.getMobile())
                  .email(this.getEmail())
                  .fax(this.getFax())
                  .additionalAddressInfo(this.getAdditionalAddressInfo())
                  .externalId(this.getExternalId());
          if (this instanceof Address) {
              builder.custom(Optional.ofNullable(((Address)this).getCustom()).map(com.commercetools.api.models.type.CustomFields::toDraft).orElse(null));
          }

          return builder;
      }

      public default boolean equalsIgnoreId(final BaseAddress address) {
          return address != null && address.toDraftBuilder()
                  .id(null)
                  .buildUnchecked()
                  .equals(this.toDraftBuilder().id(null).buildUnchecked());
      }
  Address:
    (java-extends): 'com.commercetools.api.models.Customizable<Address>'
    properties:
      id:
        required: false
  AddressDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<AddressDraft>'
  Asset:
    (java-extends): 'com.commercetools.api.models.Customizable<Asset>, com.commercetools.api.models.WithKey'
  AssetDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<AssetDraft>, com.commercetools.api.models.WithKey'
  LocalizedString:
    (java-extends): 'com.commercetools.api.models.common.LocalizedStringUtil'
  ReplicaCartDraft:
    (java-mixin): |
      @JsonIgnore
      @Deprecated
      public default void setReference(final Object reference) {
          setReference((Reference)reference);
      };
    properties:
      reference:
        type: Reference
  Cart:
    (java-extends): 'com.commercetools.api.models.DomainResource<Cart>, com.commercetools.api.models.Referencable<Cart>, com.commercetools.api.models.ResourceIdentifiable<Cart>, com.commercetools.api.models.Customizable<Cart>, com.commercetools.api.models.order.OrderLike<Cart>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.cart.CartResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.cart.CartReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.CART;
      }
  CartDiscount:
    (java-extends): 'com.commercetools.api.models.DomainResource<CartDiscount>, com.commercetools.api.models.Referencable<CartDiscount>, com.commercetools.api.models.ResourceIdentifiable<CartDiscount>, com.commercetools.api.models.Customizable<CartDiscount>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.cart_discount.CartDiscountResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.cart_discount.CartDiscountReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.CART_DISCOUNT;
      }
  Category:
    (java-extends): 'com.commercetools.api.models.DomainResource<Category>, com.commercetools.api.models.Referencable<Category>, com.commercetools.api.models.ResourceIdentifiable<Category>, com.commercetools.api.models.Customizable<Category>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.category.CategoryResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.category.CategoryReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.CATEGORY;
      }
  Channel:
    (java-extends): 'com.commercetools.api.models.DomainResource<Channel>, com.commercetools.api.models.Referencable<Channel>, com.commercetools.api.models.ResourceIdentifiable<Channel>, com.commercetools.api.models.Customizable<Channel>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.channel.ChannelResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.channel.ChannelReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.CHANNEL;
      }
  CustomObject:
    (java-extends): 'com.commercetools.api.models.DomainResource<CustomObject>, com.commercetools.api.models.Referencable<CustomObject>'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.custom_object.CustomObjectReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.KEY_VALUE_DOCUMENT;
      }
  CustomObjectPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<CustomObject>'
  CustomObjectReference:
    (java-extends): com.commercetools.api.models.Identifiable<CustomObject>
  Customer:
    (java-extends): 'com.commercetools.api.models.DomainResource<Customer>, com.commercetools.api.models.Referencable<Customer>, com.commercetools.api.models.ResourceIdentifiable<Customer>, com.commercetools.api.models.Customizable<Customer>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.customer.CustomerResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.customer.CustomerReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.CUSTOMER;
      }
  CustomerDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CustomerDraft>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      public static CustomerDraftBuilder builder(Customer customer) {
          List<BaseAddress> addresses = new ArrayList<>(customer.getAddresses());
          Map<String, Integer> addressIds = java.util.stream.IntStream.range(0, addresses.size())
                .boxed()
                .collect(java.util.stream.Collectors.toMap(integer -> addresses.get(integer).getId(), Function.identity()));
          return CustomerDraft.builder()
                .key(customer.getKey())
                .customerNumber(customer.getCustomerNumber())
                .externalId(customer.getExternalId())
                .email(customer.getEmail())
                .firstName(customer.getFirstName())
                .lastName(customer.getLastName())
                .middleName(customer.getMiddleName())
                .title(customer.getTitle())
                .dateOfBirth(customer.getDateOfBirth())
                .companyName(customer.getCompanyName())
                .vatId(customer.getVatId())
                .addresses(addresses.size() > 0 ? addresses : null)
                .defaultBillingAddress(customer.getDefaultBillingAddressId() != null
                        ? addressIds.get(customer.getDefaultBillingAddressId())
                        : null)
                .defaultShippingAddress(customer.getDefaultShippingAddressId() != null
                        ? addressIds.get(customer.getDefaultShippingAddressId())
                        : null)
                .billingAddresses(customer.getBillingAddressIds().size() > 0 ? addressIds.entrySet()
                        .stream()
                        .filter(entry -> customer.getBillingAddressIds().contains(entry.getKey()))
                        .map(Map.Entry::getValue)
                        .collect(java.util.stream.Collectors.toList()) : null)
                .shippingAddresses(customer.getShippingAddressIds().size() > 0 ? addressIds.entrySet()
                        .stream()
                        .filter(entry -> customer.getShippingAddressIds().contains(entry.getKey()))
                        .map(Map.Entry::getValue)
                        .collect(java.util.stream.Collectors.toList()) : null)
                .isEmailVerified(customer.getIsEmailVerified())
                .customerGroup(Optional.ofNullable(customer.getCustomerGroup())
                        .map(reference -> CustomerGroupResourceIdentifier.builder().id(reference.getId()).build())
                        .orElse(null))
                .locale(customer.getLocale())
                .salutation(customer.getSalutation())
                .stores(Optional.ofNullable(customer.getStores())
                        .map(stores -> stores.stream()
                                .map(store -> StoreResourceIdentifier.builder().key(store.getKey()).build())
                                .collect(java.util.stream.Collectors.toList()))
                        .orElse(null))
                .authenticationMode(customer.getAuthenticationMode())
                .custom(Optional.ofNullable(customer.getCustom()).map(com.commercetools.api.models.type.CustomFields::toDraft).orElse(null));
     }
  CustomerPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Customer>'
  CustomerReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Customer>'
  CustomerResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Customer>'
  CustomerUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<CustomerUpdate,
      CustomerUpdateAction, CustomerUpdateBuilder>'
  CustomerUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<CustomerUpdateAction>'
  CustomerGroup:
    (java-extends): 'com.commercetools.api.models.DomainResource<CustomerGroup>, com.commercetools.api.models.Referencable<CustomerGroup>, com.commercetools.api.models.ResourceIdentifiable<CustomerGroup>, com.commercetools.api.models.Customizable<CustomerGroup>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.customer_group.CustomerGroupResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.customer_group.CustomerGroupReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.CUSTOMER_GROUP;
      }
  CustomerGroupDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CustomerGroupDraft>, com.commercetools.api.models.WithKey'
  CustomerGroupPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<CustomerGroup>'
  CustomerGroupReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<CustomerGroup>'
  CustomerGroupResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<CustomerGroup>'
  CustomerGroupUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<CustomerGroupUpdate,
      CustomerGroupUpdateAction, CustomerGroupUpdateBuilder>'
  CustomerGroupUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<CustomerGroupUpdateAction>'
  DiscountCode:
    (java-extends): 'com.commercetools.api.models.DomainResource<DiscountCode>, com.commercetools.api.models.Referencable<DiscountCode>, com.commercetools.api.models.ResourceIdentifiable<DiscountCode>, com.commercetools.api.models.Customizable<DiscountCode>'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.discount_code.DiscountCodeResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.discount_code.DiscountCodeReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.DISCOUNT_CODE;
      }
  DiscountCodeDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<DiscountCodeDraft>'
  DiscountCodePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<DiscountCode>'
  DiscountCodeReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<DiscountCode>'
  DiscountCodeResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<DiscountCode>'
  DiscountCodeUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<DiscountCodeUpdate,
      DiscountCodeUpdateAction, DiscountCodeUpdateBuilder>'
  DiscountCodeUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<DiscountCodeUpdateAction>'
  Extension:
    (java-extends): 'com.commercetools.api.models.DomainResource<Extension>, com.commercetools.api.models.WithKey'
  ExtensionDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  ExtensionPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Extension>'
  ExtensionUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ExtensionUpdate,
      ExtensionUpdateAction, ExtensionUpdateBuilder>'
  ExtensionUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ExtensionUpdateAction>'
  InventoryEntry:
    (java-extends): 'com.commercetools.api.models.DomainResource<InventoryEntry>, com.commercetools.api.models.Referencable<InventoryEntry>, com.commercetools.api.models.ResourceIdentifiable<InventoryEntry>, com.commercetools.api.models.Customizable<InventoryEntry>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.inventory.InventoryEntryResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.inventory.InventoryEntryReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.INVENTORY_ENTRY;
      }
  InventoryEntryDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<InventoryEntryDraft>, com.commercetools.api.models.WithKey'
  InventoryPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<InventoryEntry>'
  InventoryEntryReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<InventoryEntry>'
  InventoryEntryResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<InventoryEntry>'
  InventoryEntryUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<InventoryEntryUpdate,
      InventoryEntryUpdateAction, InventoryEntryUpdateBuilder>'
  InventoryEntryUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<InventoryEntryUpdateAction>'
  Order:
    (java-extends): 'com.commercetools.api.models.DomainResource<Order>, com.commercetools.api.models.Referencable<Order>, com.commercetools.api.models.ResourceIdentifiable<Order>, com.commercetools.api.models.Customizable<Order>, com.commercetools.api.models.order.OrderLike<Order>'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.order.OrderResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.order.OrderReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.ORDER;
      }
  OrderImportDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<OrderImportDraft>'
  OrderPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Order>'
  OrderReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Order>'
  OrderResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Order>'
  OrderUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<OrderUpdate, OrderUpdateAction, OrderUpdateBuilder>'
  OrderUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<OrderUpdateAction>'

  OrderEdit:
    (java-extends): 'com.commercetools.api.models.DomainResource<OrderEdit>, com.commercetools.api.models.Referencable<OrderEdit>, com.commercetools.api.models.ResourceIdentifiable<OrderEdit>, com.commercetools.api.models.Customizable<OrderEdit>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.order_edit.OrderEditResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.order_edit.OrderEditReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.ORDER_EDIT;
      }
  OrderEditPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<OrderEdit>'
  OrderEditReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<OrderEdit>'
  OrderEditResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<OrderEdit>'
  OrderEditUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<OrderEditUpdate, OrderEditUpdateAction, OrderEditUpdateBuilder>'
  OrderEditUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<OrderEditUpdateAction>'
  StagedOrderUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<StagedOrderUpdateAction>'
  StagedOrderAddCustomLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<StagedOrderAddCustomLineItemAction>'
  StagedOrderAddDeliveryAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<StagedOrderAddDeliveryAction>'
  StagedOrderAddLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<StagedOrderAddLineItemAction>'
  OrderAddDeliveryAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<OrderAddDeliveryAction>'

  Payment:
    (java-extends): 'com.commercetools.api.models.DomainResource<Payment>, com.commercetools.api.models.Referencable<Payment>, com.commercetools.api.models.ResourceIdentifiable<Payment>, com.commercetools.api.models.Customizable<Payment>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.payment.PaymentResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.payment.PaymentReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.PAYMENT;
      }
  PaymentDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<PaymentDraft>, com.commercetools.api.models.WithKey'
  PaymentPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Payment>'
  PaymentReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Payment>'
  PaymentResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Payment>'
  PaymentUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<PaymentUpdate,
      PaymentUpdateAction, PaymentUpdateBuilder>'
  PaymentUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<PaymentUpdateAction>'
  Transaction:
    (java-extends): 'com.commercetools.api.models.Customizable<Transaction>'
  TransactionDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<TransactionDraft>'
  Product:
    (java-extends): 'com.commercetools.api.models.DomainResource<Product>, com.commercetools.api.models.Referencable<Product>, com.commercetools.api.models.ResourceIdentifiable<Product>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.product.ProductResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.product.ProductReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.PRODUCT;
      }
  ProductDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  ProductData:
    (java-extends): 'ProductDataLike'
  ProductPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Product>'
  ProductProjection:
    (java-extends): 'ProductDataLike, com.commercetools.api.models.DomainResource<ProductProjection>'
  ProductProjectionPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ProductProjection>'
  ProductProjectionPagedSearchResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ProductProjection>'
  ProductReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Product>'
  ProductResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Product>'
  ProductUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ProductUpdate,
      ProductUpdateAction, ProductUpdateBuilder>'
  ProductUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ProductUpdateAction>'
  ProductDiscount:
    (java-extends): 'com.commercetools.api.models.DomainResource<ProductDiscount>, com.commercetools.api.models.Referencable<ProductDiscount>, com.commercetools.api.models.ResourceIdentifiable<ProductDiscount>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.product_discount.ProductDiscountResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.product_discount.ProductDiscountReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.PRODUCT_DISCOUNT;
      }
  ProductDiscountPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ProductDiscount>'
  ProductDiscountReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<ProductDiscount>'
  ProductDiscountResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<ProductDiscount>'
  ProductDiscountUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ProductDiscountUpdate,
      ProductDiscountUpdateAction, ProductDiscountUpdateBuilder>'
  ProductDiscountUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ProductDiscountUpdateAction>'
  ProductType:
    (java-extends): 'com.commercetools.api.models.DomainResource<ProductType>, com.commercetools.api.models.Referencable<ProductType>, com.commercetools.api.models.ResourceIdentifiable<ProductType>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.product_type.ProductTypeResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.product_type.ProductTypeReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.PRODUCT_TYPE;
      }
  ProductTypeDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  ProductTypePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ProductType>'
  ProductTypeReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<ProductType>'
  ProductTypeResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<ProductType>'
  ProductTypeUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ProductTypeUpdate,
      ProductTypeUpdateAction, ProductTypeUpdateBuilder>'
  ProductTypeUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ProductTypeUpdateAction>'
  Project:
    (java-extends): 'com.commercetools.api.models.WithKey'
  ProjectUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ProjectUpdate,
      ProjectUpdateAction, ProjectUpdateBuilder>'
  ProjectUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ProjectUpdateAction>'

  AssignedProductSelectionPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<AssignedProductSelection>'

  ProductSelection:
    (java-extends): 'com.commercetools.api.models.DomainResource<ProductSelection>, com.commercetools.api.models.Referencable<ProductSelection>, com.commercetools.api.models.ResourceIdentifiable<ProductSelection>, com.commercetools.api.models.Customizable<ProductSelection>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.product_selection.ProductSelectionResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.product_selection.ProductSelectionReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.PRODUCT_SELECTION;
      }
  ProductSelectionDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ProductSelectionDraft>, com.commercetools.api.models.WithKey'
  ProductSelectionPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ProductSelection>'
  ProductSelectionProductPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<AssignedProductReference>'
  ProductSelectionReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<ProductSelection>'
  ProductSelectionResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<ProductSelection>'
  ProductSelectionUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ProductSelectionUpdate,
      ProductSelectionUpdateAction, ProductSelectionUpdateBuilder>'
  ProductSelectionUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ProductSelectionUpdateAction>'
  ProductsInStorePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ProductSelectionAssignment>'

  Quote:
    (java-extends): 'com.commercetools.api.models.DomainResource<Quote>, com.commercetools.api.models.Referencable<Quote>, com.commercetools.api.models.ResourceIdentifiable<Quote>, com.commercetools.api.models.Customizable<Quote>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.quote.QuoteResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.quote.QuoteReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.QUOTE;
      }
  QuoteDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<QuoteDraft>, com.commercetools.api.models.WithKey'
  QuotePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Quote>'
  QuoteReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Quote>'
  QuoteResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Quote>'
  QuoteUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<QuoteUpdate,
      QuoteUpdateAction, QuoteUpdateBuilder>'
  QuoteUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<QuoteUpdateAction>'
  QuoteRequestPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<QuoteRequest>'
  QuoteRequestReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<QuoteRequest>'
  QuoteRequestResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<QuoteRequest>'
  QuoteRequestUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<QuoteRequestUpdate,
      QuoteRequestUpdateAction, QuoteRequestUpdateBuilder>'
  QuoteRequestUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<QuoteRequestUpdateAction>'

  Review:
    (java-extends): 'com.commercetools.api.models.DomainResource<Review>, com.commercetools.api.models.Referencable<Review>, com.commercetools.api.models.ResourceIdentifiable<Review>, com.commercetools.api.models.Customizable<Review>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.review.ReviewResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.review.ReviewReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.REVIEW;
      }
      @Deprecated
      @JsonIgnore
      public default void setTarget(final Object target) {
          setTarget((Reference)target);
      };
    properties:
      target?:
        type: Reference
  ReviewDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ReviewDraft>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Deprecated
      @JsonIgnore
      public default void setTarget(final Object target) {
          setTarget((ResourceIdentifier)target);
      };
    properties:
      target?:
        type: ResourceIdentifier
  ReviewPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Review>'
  ReviewReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Review>'
  ReviewResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Review>'
  ReviewUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ReviewUpdate,
      ReviewUpdateAction, ReviewUpdateBuilder>'
  ReviewUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ReviewUpdateAction>'

  ShippingMethod:
    (java-extends): 'com.commercetools.api.models.DomainResource<ShippingMethod>, com.commercetools.api.models.Referencable<ShippingMethod>, com.commercetools.api.models.ResourceIdentifiable<ShippingMethod>, com.commercetools.api.models.Customizable<ShippingMethod>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.shipping_method.ShippingMethodResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.shipping_method.ShippingMethodReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.SHIPPING_METHOD;
      }
  ShippingMethodDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ShippingMethodDraft>, com.commercetools.api.models.WithKey'
  ShippingMethodPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ShippingMethod>'
  ShippingMethodReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<ShippingMethod>'
  ShippingMethodResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<ShippingMethod>'
  ShippingMethodUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ShippingMethodUpdate,
      ShippingMethodUpdateAction, ShippingMethodUpdateBuilder>'
  ShippingMethodUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ShippingMethodUpdateAction>'

  ShoppingList:
    (java-extends): 'com.commercetools.api.models.DomainResource<ShoppingList>, com.commercetools.api.models.Referencable<ShoppingList>, com.commercetools.api.models.ResourceIdentifiable<ShoppingList>, com.commercetools.api.models.Customizable<ShoppingList>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.shopping_list.ShoppingListResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.shopping_list.ShoppingListReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.SHOPPING_LIST;
      }
  ShoppingListDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ShoppingListDraft>, com.commercetools.api.models.WithKey'
  ShoppingListPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ShoppingList>'
  ShoppingListReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<ShoppingList>'
  ShoppingListResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<ShoppingList>'
  ShoppingListUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ShoppingListUpdate,
      ShoppingListUpdateAction, ShoppingListUpdateBuilder>'
  ShoppingListUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ShoppingListUpdateAction>'
  ShoppingListLineItem:
    (java-extends): 'com.commercetools.api.models.Customizable<ShoppingListLineItem>'
  ShoppingListLineItemDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ShoppingListLineItemDraft>'
  ShoppingListAddLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ShoppingListAddLineItemAction>'
  ShoppingListAddTextLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ShoppingListAddTextLineItemAction>'
  TextLineItem:
    (java-extends): 'com.commercetools.api.models.Customizable<TextLineItem>'
  TextLineItemDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<TextLineItemDraft>'

  StagedQuotePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<StagedQuote>'
  StagedQuoteReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<StagedQuote>'
  StagedQuoteResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<StagedQuote>'
  StagedQuoteUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<StagedQuoteUpdate,
      StagedQuoteUpdateAction, StagedQuoteUpdateBuilder>'
  StagedQuoteUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<StagedQuoteUpdateAction>'

  StandalonePrice:
    (java-extends): 'com.commercetools.api.models.DomainResource<StandalonePrice>, com.commercetools.api.models.Referencable<StandalonePrice>, com.commercetools.api.models.ResourceIdentifiable<StandalonePrice>, com.commercetools.api.models.Customizable<StandalonePrice>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.standalone_price.StandalonePriceResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.standalone_price.StandalonePriceReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.STANDALONE_PRICE;
      }
  StandalonePriceDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<StandalonePriceDraft>, com.commercetools.api.models.WithKey'
  StandalonePricePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<StandalonePrice>'
  StandalonePriceUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<StandalonePriceUpdate,
      StandalonePriceUpdateAction, StandalonePriceUpdateBuilder>'
  StandalonePriceUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<StandalonePriceUpdateAction>'

  State:
    (java-extends): 'com.commercetools.api.models.DomainResource<State>, com.commercetools.api.models.Referencable<State>, com.commercetools.api.models.ResourceIdentifiable<State>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.state.StateResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.state.StateReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.STATE;
      }
  StateDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  StatePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<State>'
  StateReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<State>'
  StateResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<State>'
  StateUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<StateUpdate,
      StateUpdateAction, StateUpdateBuilder>'
  StateUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<StateUpdateAction>'

  Store:
    (java-extends): 'com.commercetools.api.models.DomainResource<Store>, com.commercetools.api.models.Referencable<Store>, com.commercetools.api.models.ResourceIdentifiable<Store>, com.commercetools.api.models.Customizable<Store>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.store.StoreResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.store.StoreReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.STORE;
      }
  StoreDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<StoreDraft>, com.commercetools.api.models.WithKey'
  StorePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Store>'
  StoreReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Store>'
  StoreResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Store>'
  StoreUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<StoreUpdate,
      StoreUpdateAction, StoreUpdateBuilder>'
  StoreUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<StoreUpdateAction>'

  Subscription:
    (java-extends): 'com.commercetools.api.models.DomainResource<Subscription>, com.commercetools.api.models.WithKey'
  SubscriptionDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  SubscriptionPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Subscription>'
  SubscriptionUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<SubscriptionUpdate,
      SubscriptionUpdateAction, SubscriptionUpdateBuilder>'
  SubscriptionUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<SubscriptionUpdateAction>'

  TaxCategory:
    (java-extends): 'com.commercetools.api.models.DomainResource<TaxCategory>, com.commercetools.api.models.Referencable<TaxCategory>, com.commercetools.api.models.ResourceIdentifiable<TaxCategory>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.tax_category.TaxCategoryResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.tax_category.TaxCategoryReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.TAX_CATEGORY;
      }
  TaxCategoryDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  TaxCategoryPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<TaxCategory>'
  TaxCategoryReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<TaxCategory>'
  TaxCategoryResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<TaxCategory>'
  TaxCategoryUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<TaxCategoryUpdate,
      TaxCategoryUpdateAction, TaxCategoryUpdateBuilder>'
  TaxCategoryUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<TaxCategoryUpdateAction>'

  Type:
    (java-extends): 'com.commercetools.api.models.DomainResource<Type>, com.commercetools.api.models.Referencable<Type>, com.commercetools.api.models.ResourceIdentifiable<Type>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.type.TypeResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.type.TypeReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.TYPE;
      }
  TypeDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  TypePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Type>'
  TypeResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Type>'
  TypeUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<TypeUpdate,
      TypeUpdateAction, TypeUpdateBuilder>'
  TypeUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<TypeUpdateAction>'

  Zone:
    (java-extends): 'com.commercetools.api.models.DomainResource<Zone>, com.commercetools.api.models.Referencable<Zone>, com.commercetools.api.models.ResourceIdentifiable<Zone>, com.commercetools.api.models.WithKey'
    (java-mixin): |
      @Override
      public default com.commercetools.api.models.common.ResourceIdentifier toResourceIdentifier() {
          return com.commercetools.api.models.zone.ZoneResourceIdentifier.builder().id(getId()).build();
      }
      @Override
      public default com.commercetools.api.models.common.Reference toReference() {
          return com.commercetools.api.models.zone.ZoneReference.builder().id(getId()).build();
      }
      public static com.commercetools.api.models.common.ReferenceTypeId referenceTypeId() {
          return com.commercetools.api.models.common.ReferenceTypeId.ZONE;
      }
  ZoneDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  ZonePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Zone>'
  ZoneReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Zone>'
  ZoneResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Zone>'
  ZoneUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ZoneUpdate,
      ZoneUpdateAction, ZoneUpdateBuilder>'
  ZoneUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ZoneUpdateAction>'
  CentPrecisionMoney:
    (java-mixin): |
      public static CentPrecisionMoney of(final javax.money.MonetaryAmount monetaryAmount) {
          return MoneyUtil.of(monetaryAmount);
      }
      public default CentPrecisionMoneyDraft toDraft() {
          return CentPrecisionMoneyDraft.of(this);
      }
  CentPrecisionMoneyDraft:
    (java-mixin): |
      public static CentPrecisionMoneyDraft of(final javax.money.MonetaryAmount monetaryAmount) {
          return MoneyUtil.draftOf(monetaryAmount);
      }
      public static CentPrecisionMoneyDraft of(final CentPrecisionMoney template) {
          CentPrecisionMoneyDraftImpl instance = new CentPrecisionMoneyDraftImpl();
          instance.setCentAmount(template.getCentAmount());
          instance.setCurrencyCode(template.getCurrencyCode());
          instance.setFractionDigits(template.getFractionDigits());
          return instance;
      }
  HighPrecisionMoney:
    (java-mixin): |
      public static HighPrecisionMoney of(final javax.money.MonetaryAmount monetaryAmount, final int fractionDigits) {
          return MoneyUtil.of(monetaryAmount, fractionDigits);
      }
      public default HighPrecisionMoneyDraft toDraft() {
          return HighPrecisionMoneyDraft.of(this);
      }
      @Override
      default javax.money.MonetaryOperator createMoneyOperator() {
          return amount -> MoneyUtil.of(amount, getFractionDigits());
      }
  HighPrecisionMoneyDraft:
    (java-mixin): |
      public static HighPrecisionMoneyDraft of(javax.money.MonetaryAmount monetaryAmount, final int fractionDigits) {
          return MoneyUtil.draftOf(monetaryAmount, fractionDigits);
      }
      public static HighPrecisionMoneyDraft of(final HighPrecisionMoney template) {
          HighPrecisionMoneyDraftImpl instance = new HighPrecisionMoneyDraftImpl();
          instance.setCentAmount(template.getCentAmount());
          instance.setCurrencyCode(template.getCurrencyCode());
          instance.setFractionDigits(template.getFractionDigits());
          instance.setPreciseAmount(template.getPreciseAmount());
          return instance;
      }
      @Override
      default javax.money.MonetaryOperator createMoneyOperator() {
          return amount -> MoneyUtil.draftOf(amount, getFractionDigits());
      }
  TypedMoney:
    (java-mixin): |
      @Override
      default javax.money.MonetaryOperator createMoneyOperator() {
          return MoneyUtil::of;
      }
  TypedMoneyDraft:
    (java-mixin): |
      @Override
      default javax.money.MonetaryOperator createMoneyOperator() {
          return MoneyUtil::draftOf;
      }
  Money:
    (java-extends): 'com.commercetools.api.models.common.MonetaryAmountConvertable'
    (java-mixin): |
      public default TypedMoneyDraft toDraft() {
          if (this instanceof TypedMoneyDraft) {
              return (TypedMoneyDraft) this;
          }
          return TypedMoneyDraft.centPrecisionBuilder()
                  .centAmount(this.getCentAmount())
                  .currencyCode(this.getCurrencyCode())
                  .build();
      }
  Reference:
    (java-mixin): |
      public default ResourceIdentifier toResourceIdentifier() {
          return new ResourceIdentifierImpl(this.getTypeId(), this.getId(), null);
      }
  TypeReference:
    (java-extends): com.commercetools.api.models.Identifiable<Type>
    (java-mixin): |
      @Override
      public default TypeResourceIdentifier toResourceIdentifier() {
          return TypeResourceIdentifier.builder().id(this.getId()).build();
      }
  CustomFields:
    (java-mixin): |
      public default CustomFieldsDraft toDraft() {
          return toDraftBuilder().build();
      }

      public default CustomFieldsDraftBuilder toDraftBuilder() {
          return CustomFieldsDraft.builder()
                  .type(getType().toResourceIdentifier())
                  .fields(getFields());
      }
  CustomFieldsDraft:
    (java-mixin): |
      public static CustomFieldsDraft of(final CustomFields template) {
          return template.toDraft();
      }

      public static CustomFieldsDraftBuilder builder(final CustomFields template) {
          return template.toDraftBuilder();
      }
  Parcel:
    (java-extends): 'com.commercetools.api.models.Customizable<Parcel>'
    (java-mixin): |
      public default ParcelDraftBuilder toDraftBuilder() {
          return ParcelDraft.builder()
                  .measurements(this.getMeasurements())
                  .trackingData(this.getTrackingData())
                  .items(this.getItems())
                  .custom(this.getCustom().toDraft());
      }

      public default ParcelDraft toDraft() {
          return toDraftBuilder().build();
      }
  ParcelDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ParcelDraft>'
  ReturnItem:
    (java-extends): 'com.commercetools.api.models.Customizable<ReturnItem>'
  ReturnItemDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ReturnItemDraft>'
  Delivery:
    (java-extends): 'com.commercetools.api.models.Customizable<Delivery>'
    (java-mixin): |
      public default DeliveryDraftBuilder toDraftBuilder() {
          return DeliveryDraft.builder()
                  .address(this.getAddress().toDraft())
                  .items(this.getItems())
                  .parcels(this.getParcels().stream().map(Parcel::toDraft).collect(java.util.stream.Collectors.toList()))
                  .custom(this.getCustom().toDraft());
      }

      public default DeliveryDraft toDraft() {
          return toDraftBuilder().build();
      }
  DeliveryDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<DeliveryDraft>'
  ApiClientPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<ApiClient>'
  AttributeGroup:
    (java-extends): 'com.commercetools.api.models.DomainResource<AttributeGroup>'
  AttributeGroupReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<AttributeGroup>'
  AttributeGroupResourceIdentifier:
    (java-extends): com.commercetools.api.models.Identifiable<AttributeGroup>
  AttributeGroupPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<AttributeGroup>'
  AttributeGroupUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<AttributeGroupUpdate,
      AttributeGroupUpdateAction, AttributeGroupUpdateBuilder>'
  AttributeGroupUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<AttributeGroupUpdateAction>'
  BusinessUnit:
    (java-extends): 'com.commercetools.api.models.WithKey'
  BusinessUnitDraft:
    (java-extends): 'com.commercetools.api.models.WithKey'
  BusinessUnitPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<BusinessUnit>'
  BusinessUnitReference:
    (java-extends): com.commercetools.api.models.Identifiable<BusinessUnit>
  BusinessUnitResourceIdentifier:
    (java-extends): com.commercetools.api.models.Identifiable<BusinessUnit>
  BusinessUnitUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<  BusinessUnitUpdate,
      BusinessUnitUpdateAction, BusinessUnitUpdateBuilder>'
  BusinessUnitUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<BusinessUnitUpdateAction>'
  CartDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CartDraft>, com.commercetools.api.models.WithKey'
  CartPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Cart>'
  CartReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Cart>'
  CartResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Cart>'
  CartUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<CartUpdate, CartUpdateAction, CartUpdateBuilder>'
  CartUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<CartUpdateAction>'
  CategoryDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CategoryDraft>'
  CategoryPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Category>'
  CategoryReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Category>'
  CategoryResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Category>'

  CategoryUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<CategoryUpdate,
      CategoryUpdateAction, CategoryUpdateBuilder>'
  CategoryUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<CategoryUpdateAction>'
  CartDiscountDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CartDiscountDraft>, com.commercetools.api.models.WithKey'
  CartDiscountPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<CartDiscount>'
  CartDiscountReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<CartDiscount>'
  CartDiscountResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<CartDiscount>'
  CartDiscountUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<CartDiscountUpdate,
      CartDiscountUpdateAction, CartDiscountUpdateBuilder>'
  CartDiscountUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<CartDiscountUpdateAction>'
  CartAddCustomLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CartAddCustomLineItemAction>'
  CartAddLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CartAddLineItemAction>'
  ChannelDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<ChannelDraft>, com.commercetools.api.models.WithKey'
  ChannelPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Channel>'
  ChannelReference:
    (java-extends): 'com.commercetools.api.models.Identifiable<Channel>'
  ChannelResourceIdentifier:
    (java-extends): 'com.commercetools.api.models.Identifiable<Channel>'
  ChannelUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<ChannelUpdate,
      ChannelUpdateAction, ChannelUpdateBuilder>'
  ChannelUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<ChannelUpdateAction>'

  CustomLineItem:
    (java-extends): 'com.commercetools.api.models.Customizable<CustomLineItem>'
  CustomLineItemDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CustomLineItemDraft>'
  CustomLineItemImportDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<CustomLineItemImportDraft>'
  Update:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<Update, UpdateAction, UpdateBuilder>'
  UpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<UpdateAction>'
  OrderEditDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<OrderEditDraft>'
  PagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<BaseResource>'
  LineItem:
    (java-extends): 'com.commercetools.api.models.Customizable<LineItem>'
  LineItemDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<LineItemDraft>'
  LineItemImportDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<LineItemImportDraft>'

  MessagePagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<Message>'
  Message:
    (java-extends): 'com.commercetools.api.models.DomainResource<Message>'
  MyPaymentPagedQueryResponse:
    (java-extends): 'com.commercetools.api.models.ResourcePagedQueryResponse<MyPayment>'
  MyCartDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyCartDraft>'
  MyCartUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<MyCartUpdate, MyCartUpdateAction, MyCartUpdateBuilder>'
  MyCartUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<MyCartUpdateAction>'
  MyCartAddLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyCartAddLineItemAction>'
  MyCustomerDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyCustomerDraft>'
  MyPayment:
    (java-extends): 'com.commercetools.api.models.DomainResource<MyPayment>, com.commercetools.api.models.Customizable<MyPayment>'
  MyPaymentDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyPaymentDraft>'
  MyPaymentUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<MyPaymentUpdate,
      MyPaymentUpdateAction, MyPaymentUpdateBuilder>'
  MyPaymentUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<MyPaymentUpdateAction>'
  MyShoppingListDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyShoppingListDraft>'
  MyShoppingListUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<MyShoppingListUpdate,
      MyShoppingListUpdateAction, MyShoppingListUpdateBuilder>'
  MyShoppingListUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<MyShoppingListUpdateAction>'
  MyShoppingListAddLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyShoppingListAddLineItemAction>'
  MyShoppingListAddTextLineItemAction:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyShoppingListAddTextLineItemAction>'
  MyTransactionDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyTransactionDraft>'
  MyQuoteUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<MyQuoteUpdate, MyQuoteUpdateAction, MyQuoteUpdateBuilder>'
  MyQuoteUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<MyQuoteUpdateAction>'
  MyQuoteRequestUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<MyQuoteRequestUpdate,
      MyQuoteRequestUpdateAction, MyQuoteRequestUpdateBuilder>'
  MyQuoteRequestUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<MyQuoteRequestUpdateAction>'
  MyCustomerUpdate:
    (java-extends): 'com.commercetools.api.models.ResourceUpdate<MyCustomerUpdate,
      MyCustomerUpdateAction, MyCustomerUpdateBuilder>'
  MyCustomerUpdateAction:
    (java-extends): 'com.commercetools.api.models.ResourceUpdateAction<MyCustomerUpdateAction>'
  MyLineItemDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<MyLineItemDraft>'
  Price:
    (java-extends): 'com.commercetools.api.models.Customizable<Price>'
  PriceDraft:
    (java-extends): 'com.commercetools.api.models.CustomizableDraft<PriceDraft>'
  QueryPrice:
    (java-extends): 'com.commercetools.api.models.Customizable<QueryPrice>'
  ScopedPrice:
    (java-extends): 'com.commercetools.api.models.Customizable<ScopedPrice>'
/{projectKey}:
  /categories:
    (java-mixin): |
        public ByProjectKeyCategoriesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.category.Category> category,
                java.util.List<com.commercetools.api.models.category.CategoryUpdateAction> actions) {
            return withId(category.getId()).post(builder -> com.commercetools.api.models.category.CategoryUpdate.builder()
                    .version(category.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyCategoriesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.category.Category> category,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.category.CategoryUpdateAction, com.commercetools.api.models.category.CategoryUpdateActionBuilder>> op) {
            return withId(category.getId()).post(builder -> com.commercetools.api.models.category.CategoryUpdate.builder()
                    .version(category.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.category.CategoryUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.category.CategoryUpdateAction, com.commercetools.api.models.category.CategoryUpdateActionBuilder, ByProjectKeyCategoriesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.category.Category> category) {
            return builder -> withId(category.getId())
                    .post(b -> com.commercetools.api.models.category.CategoryUpdate.builder()
                            .version(category.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.category.CategoryUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyCategoriesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.category.Category> category) {
            return withId(category.getId()).delete().withVersion(category.getVersion());
        }

        public ByProjectKeyCategoriesPost create(com.commercetools.api.models.category.CategoryDraft categoryDraft) {
            return post(categoryDraft);
        }

        public ByProjectKeyCategoriesPost create(
                UnaryOperator<com.commercetools.api.models.category.CategoryDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.category.CategoryDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCategoriesGet,
        com.commercetools.api.models.category.CategoryPagedQueryResponse>'
  /carts:
    (java-mixin): |
        public ByProjectKeyCartsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart.Cart> cart,
                java.util.List<com.commercetools.api.models.cart.CartUpdateAction> actions) {
            return withId(cart.getId()).post(builder -> com.commercetools.api.models.cart.CartUpdate.builder()
                    .version(cart.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyCartsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart.Cart> cart,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.cart.CartUpdateAction, com.commercetools.api.models.cart.CartUpdateActionBuilder>> op) {
            return withId(cart.getId()).post(builder -> com.commercetools.api.models.cart.CartUpdate.builder()
                    .version(cart.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.cart.CartUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.cart.CartUpdateAction, com.commercetools.api.models.cart.CartUpdateActionBuilder, ByProjectKeyCartsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart.Cart> cart) {
            return builder -> withId(cart.getId())
                    .post(b -> com.commercetools.api.models.cart.CartUpdate.builder()
                            .version(cart.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.cart.CartUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyCartsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart.Cart> cart) {
            return withId(cart.getId()).delete().withVersion(cart.getVersion());
        }

        public ByProjectKeyCartsPost create(com.commercetools.api.models.cart.CartDraft cartDraft) {
            return post(cartDraft);
        }

        public ByProjectKeyCartsPost create(
                UnaryOperator<com.commercetools.api.models.cart.CartDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.cart.CartDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCartsGet,
        com.commercetools.api.models.cart.CartPagedQueryResponse>'

  /cart-discounts:
    (java-mixin): |
        public ByProjectKeyCartDiscountsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart_discount.CartDiscount> cartDiscount,
                java.util.List<com.commercetools.api.models.cart_discount.CartDiscountUpdateAction> actions) {
            return withId(cartDiscount.getId()).post(builder -> com.commercetools.api.models.cart_discount.CartDiscountUpdate.builder()
                    .version(cartDiscount.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyCartDiscountsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart_discount.CartDiscount> cartDiscount,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.cart_discount.CartDiscountUpdateAction, com.commercetools.api.models.cart_discount.CartDiscountUpdateActionBuilder>> op) {
            return withId(cartDiscount.getId()).post(builder -> com.commercetools.api.models.cart_discount.CartDiscountUpdate.builder()
                    .version(cartDiscount.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.cart_discount.CartDiscountUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.cart_discount.CartDiscountUpdateAction, com.commercetools.api.models.cart_discount.CartDiscountUpdateActionBuilder, ByProjectKeyCartDiscountsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart_discount.CartDiscount> cartDiscount) {
            return builder -> withId(cartDiscount.getId())
                    .post(b -> com.commercetools.api.models.cart_discount.CartDiscountUpdate.builder()
                            .version(cartDiscount.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.cart_discount.CartDiscountUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyCartDiscountsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.cart_discount.CartDiscount> cartDiscount) {
            return withId(cartDiscount.getId()).delete().withVersion(cartDiscount.getVersion());
        }

        public ByProjectKeyCartDiscountsPost create(com.commercetools.api.models.cart_discount.CartDiscountDraft cartDiscountDraft) {
            return post(cartDiscountDraft);
        }

        public ByProjectKeyCartDiscountsPost create(
                UnaryOperator<com.commercetools.api.models.cart_discount.CartDiscountDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.cart_discount.CartDiscountDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCartDiscountsGet,
        com.commercetools.api.models.cart_discount.CartDiscountPagedQueryResponse>'
  /channels:
    (java-mixin): |
        public ByProjectKeyChannelsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.channel.Channel> channel,
                java.util.List<com.commercetools.api.models.channel.ChannelUpdateAction> actions) {
            return withId(channel.getId()).post(builder -> com.commercetools.api.models.channel.ChannelUpdate.builder()
                    .version(channel.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyChannelsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.channel.Channel> channel,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.channel.ChannelUpdateAction, com.commercetools.api.models.channel.ChannelUpdateActionBuilder>> op) {
            return withId(channel.getId()).post(builder -> com.commercetools.api.models.channel.ChannelUpdate.builder()
                    .version(channel.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.channel.ChannelUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.channel.ChannelUpdateAction, com.commercetools.api.models.channel.ChannelUpdateActionBuilder, ByProjectKeyChannelsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.channel.Channel> channel) {
            return builder -> withId(channel.getId())
                    .post(b -> com.commercetools.api.models.channel.ChannelUpdate.builder()
                            .version(channel.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.channel.ChannelUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyChannelsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.channel.Channel> channel) {
            return withId(channel.getId()).delete().withVersion(channel.getVersion());
        }

        public ByProjectKeyChannelsPost create(com.commercetools.api.models.channel.ChannelDraft channelDraft) {
            return post(channelDraft);
        }

        public ByProjectKeyChannelsPost create(
                UnaryOperator<com.commercetools.api.models.channel.ChannelDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.channel.ChannelDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyChannelsGet,
        com.commercetools.api.models.channel.ChannelPagedQueryResponse>'
  /customers:
    (java-mixin): |
        public ByProjectKeyCustomersByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer.Customer> customer,
                java.util.List<com.commercetools.api.models.customer.CustomerUpdateAction> actions) {
            return withId(customer.getId()).post(builder -> com.commercetools.api.models.customer.CustomerUpdate.builder()
                    .version(customer.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyCustomersByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer.Customer> customer,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.customer.CustomerUpdateAction, com.commercetools.api.models.customer.CustomerUpdateActionBuilder>> op) {
            return withId(customer.getId()).post(builder -> com.commercetools.api.models.customer.CustomerUpdate.builder()
                    .version(customer.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.customer.CustomerUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.customer.CustomerUpdateAction, com.commercetools.api.models.customer.CustomerUpdateActionBuilder, ByProjectKeyCustomersByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer.Customer> customer) {
            return builder -> withId(customer.getId())
                    .post(b -> com.commercetools.api.models.customer.CustomerUpdate.builder()
                            .version(customer.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.customer.CustomerUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyCustomersByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer.Customer> customer) {
            return withId(customer.getId()).delete().withVersion(customer.getVersion());
        }

        public ByProjectKeyCustomersPost create(com.commercetools.api.models.customer.CustomerDraft customerDraft) {
            return post(customerDraft);
        }

        public ByProjectKeyCustomersPost create(
                UnaryOperator<com.commercetools.api.models.customer.CustomerDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.customer.CustomerDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCustomersGet,
        com.commercetools.api.models.customer.CustomerPagedQueryResponse>'
  /custom-objects:
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCustomObjectsGet,
        com.commercetools.api.models.custom_object.CustomObjectPagedQueryResponse>'
  /customer-groups:
    (java-mixin): |
        public ByProjectKeyCustomerGroupsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer_group.CustomerGroup> customerGroup,
                java.util.List<com.commercetools.api.models.customer_group.CustomerGroupUpdateAction> actions) {
            return withId(customerGroup.getId()).post(builder -> com.commercetools.api.models.customer_group.CustomerGroupUpdate.builder()
                    .version(customerGroup.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyCustomerGroupsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer_group.CustomerGroup> customerGroup,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.customer_group.CustomerGroupUpdateAction, com.commercetools.api.models.customer_group.CustomerGroupUpdateActionBuilder>> op) {
            return withId(customerGroup.getId()).post(builder -> com.commercetools.api.models.customer_group.CustomerGroupUpdate.builder()
                    .version(customerGroup.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.customer_group.CustomerGroupUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.customer_group.CustomerGroupUpdateAction, com.commercetools.api.models.customer_group.CustomerGroupUpdateActionBuilder, ByProjectKeyCustomerGroupsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer_group.CustomerGroup> customerGroup) {
            return builder -> withId(customerGroup.getId())
                    .post(b -> com.commercetools.api.models.customer_group.CustomerGroupUpdate.builder()
                            .version(customerGroup.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.customer_group.CustomerGroupUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyCustomerGroupsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.customer_group.CustomerGroup> customerGroup) {
            return withId(customerGroup.getId()).delete().withVersion(customerGroup.getVersion());
        }

        public ByProjectKeyCustomerGroupsPost create(com.commercetools.api.models.customer_group.CustomerGroupDraft customerGroupDraft) {
            return post(customerGroupDraft);
        }

        public ByProjectKeyCustomerGroupsPost create(
                UnaryOperator<com.commercetools.api.models.customer_group.CustomerGroupDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.customer_group.CustomerGroupDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyCustomerGroupsGet,
        com.commercetools.api.models.customer_group.CustomerGroupPagedQueryResponse>'
  /discount-codes:
    (java-mixin): |
        public ByProjectKeyDiscountCodesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.discount_code.DiscountCode> discountCode,
                java.util.List<com.commercetools.api.models.discount_code.DiscountCodeUpdateAction> actions) {
            return withId(discountCode.getId()).post(builder -> com.commercetools.api.models.discount_code.DiscountCodeUpdate.builder()
                    .version(discountCode.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyDiscountCodesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.discount_code.DiscountCode> discountCode,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.discount_code.DiscountCodeUpdateAction, com.commercetools.api.models.discount_code.DiscountCodeUpdateActionBuilder>> op) {
            return withId(discountCode.getId()).post(builder -> com.commercetools.api.models.discount_code.DiscountCodeUpdate.builder()
                    .version(discountCode.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.discount_code.DiscountCodeUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.discount_code.DiscountCodeUpdateAction, com.commercetools.api.models.discount_code.DiscountCodeUpdateActionBuilder, ByProjectKeyDiscountCodesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.discount_code.DiscountCode> discountCode) {
            return builder -> withId(discountCode.getId())
                    .post(b -> com.commercetools.api.models.discount_code.DiscountCodeUpdate.builder()
                            .version(discountCode.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.discount_code.DiscountCodeUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyDiscountCodesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.discount_code.DiscountCode> discountCode) {
            return withId(discountCode.getId()).delete().withVersion(discountCode.getVersion());
        }

        public ByProjectKeyDiscountCodesPost create(com.commercetools.api.models.discount_code.DiscountCodeDraft discountCodeDraft) {
            return post(discountCodeDraft);
        }

        public ByProjectKeyDiscountCodesPost create(
                UnaryOperator<com.commercetools.api.models.discount_code.DiscountCodeDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.discount_code.DiscountCodeDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyDiscountCodesGet,
        com.commercetools.api.models.discount_code.DiscountCodePagedQueryResponse>'
  /in-store/key={storeKey}:
    /me:
      /shopping-lists:
        get:
          (java-implements):
            'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyInStoreKeyByStoreKeyMeShoppingListsGet,
            com.commercetools.api.models.shopping_list.ShoppingListPagedQueryResponse>'
    /shopping-lists:
      get:
        (java-implements):
          'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyInStoreKeyByStoreKeyShoppingListsGet,
          com.commercetools.api.models.shopping_list.ShoppingListPagedQueryResponse>'
  /inventory:
    (java-mixin): |
        public ByProjectKeyInventoryByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.inventory.InventoryEntry> inventoryEntry,
                java.util.List<com.commercetools.api.models.inventory.InventoryEntryUpdateAction> actions) {
            return withId(inventoryEntry.getId()).post(builder -> com.commercetools.api.models.inventory.InventoryEntryUpdate.builder()
                    .version(inventoryEntry.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyInventoryByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.inventory.InventoryEntry> inventoryEntry,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.inventory.InventoryEntryUpdateAction, com.commercetools.api.models.inventory.InventoryEntryUpdateActionBuilder>> op) {
            return withId(inventoryEntry.getId()).post(builder -> com.commercetools.api.models.inventory.InventoryEntryUpdate.builder()
                    .version(inventoryEntry.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.inventory.InventoryEntryUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.inventory.InventoryEntryUpdateAction, com.commercetools.api.models.inventory.InventoryEntryUpdateActionBuilder, ByProjectKeyInventoryByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.inventory.InventoryEntry> inventoryEntry) {
            return builder -> withId(inventoryEntry.getId())
                    .post(b -> com.commercetools.api.models.inventory.InventoryEntryUpdate.builder()
                            .version(inventoryEntry.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.inventory.InventoryEntryUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyInventoryByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.inventory.InventoryEntry> inventoryEntry) {
            return withId(inventoryEntry.getId()).delete().withVersion(inventoryEntry.getVersion());
        }

        public ByProjectKeyInventoryPost create(com.commercetools.api.models.inventory.InventoryEntryDraft inventoryEntryDraft) {
            return post(inventoryEntryDraft);
        }

        public ByProjectKeyInventoryPost create(
                UnaryOperator<com.commercetools.api.models.inventory.InventoryEntryDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.inventory.InventoryEntryDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyInventoryGet,
        com.commercetools.api.models.inventory.InventoryPagedQueryResponse>'
  /messages:
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyMessagesGet,
        com.commercetools.api.models.message.MessagePagedQueryResponse>'
  /orders:
    (java-mixin): |
        public ByProjectKeyOrdersByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.order.Order> order,
                java.util.List<com.commercetools.api.models.order.OrderUpdateAction> actions) {
            return withId(order.getId()).post(builder -> com.commercetools.api.models.order.OrderUpdate.builder()
                    .version(order.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyOrdersByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.order.Order> order,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.order.OrderUpdateAction, com.commercetools.api.models.order.OrderUpdateActionBuilder>> op) {
            return withId(order.getId()).post(builder -> com.commercetools.api.models.order.OrderUpdate.builder()
                    .version(order.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.order.OrderUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.order.OrderUpdateAction, com.commercetools.api.models.order.OrderUpdateActionBuilder, ByProjectKeyOrdersByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.order.Order> order) {
            return builder -> withId(order.getId())
                    .post(b -> com.commercetools.api.models.order.OrderUpdate.builder()
                            .version(order.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.order.OrderUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyOrdersByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.order.Order> order) {
            return withId(order.getId()).delete().withVersion(order.getVersion());
        }

        public ByProjectKeyOrdersPost create(com.commercetools.api.models.order.OrderFromCartDraft orderFromCartDraft) {
            return post(orderFromCartDraft);
        }

        public ByProjectKeyOrdersPost create(
                UnaryOperator<com.commercetools.api.models.order.OrderFromCartDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.order.OrderFromCartDraftBuilder.of()).build());
        }
    /edits:
      get:
        (java-implements):
          'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyOrdersEditsGet,
          com.commercetools.api.models.order_edit.OrderEditPagedQueryResponse>'
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyOrdersGet,
        com.commercetools.api.models.order.OrderPagedQueryResponse>'
  /payments:
    (java-mixin): |
        public ByProjectKeyPaymentsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.payment.Payment> payment,
                java.util.List<com.commercetools.api.models.payment.PaymentUpdateAction> actions) {
            return withId(payment.getId()).post(builder -> com.commercetools.api.models.payment.PaymentUpdate.builder()
                    .version(payment.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyPaymentsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.payment.Payment> payment,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.payment.PaymentUpdateAction, com.commercetools.api.models.payment.PaymentUpdateActionBuilder>> op) {
            return withId(payment.getId()).post(builder -> com.commercetools.api.models.payment.PaymentUpdate.builder()
                    .version(payment.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.payment.PaymentUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.payment.PaymentUpdateAction, com.commercetools.api.models.payment.PaymentUpdateActionBuilder, ByProjectKeyPaymentsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.payment.Payment> payment) {
            return builder -> withId(payment.getId())
                    .post(b -> com.commercetools.api.models.payment.PaymentUpdate.builder()
                            .version(payment.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.payment.PaymentUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyPaymentsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.payment.Payment> payment) {
            return withId(payment.getId()).delete().withVersion(payment.getVersion());
        }

        public ByProjectKeyPaymentsPost create(com.commercetools.api.models.payment.PaymentDraft paymentDraft) {
            return post(paymentDraft);
        }

        public ByProjectKeyPaymentsPost create(
                UnaryOperator<com.commercetools.api.models.payment.PaymentDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.payment.PaymentDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyPaymentsGet,
        com.commercetools.api.models.payment.PaymentPagedQueryResponse>'
  /products:
    (java-mixin): |
        public ByProjectKeyProductsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product.Product> product,
                java.util.List<com.commercetools.api.models.product.ProductUpdateAction> actions) {
            return withId(product.getId()).post(builder -> com.commercetools.api.models.product.ProductUpdate.builder()
                    .version(product.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyProductsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product.Product> product,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.product.ProductUpdateAction, com.commercetools.api.models.product.ProductUpdateActionBuilder>> op) {
            return withId(product.getId()).post(builder -> com.commercetools.api.models.product.ProductUpdate.builder()
                    .version(product.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.product.ProductUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.product.ProductUpdateAction, com.commercetools.api.models.product.ProductUpdateActionBuilder, ByProjectKeyProductsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product.Product> product) {
            return builder -> withId(product.getId())
                    .post(b -> com.commercetools.api.models.product.ProductUpdate.builder()
                            .version(product.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.product.ProductUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyProductsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product.Product> product) {
            return withId(product.getId()).delete().withVersion(product.getVersion());
        }

        public ByProjectKeyProductsPost create(com.commercetools.api.models.product.ProductDraft productDraft) {
            return post(productDraft);
        }

        public ByProjectKeyProductsPost create(
                UnaryOperator<com.commercetools.api.models.product.ProductDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.product.ProductDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyProductsGet,
        com.commercetools.api.models.product.ProductPagedQueryResponse>'
  /product-discounts:
    (java-mixin): |
        public ByProjectKeyProductDiscountsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_discount.ProductDiscount> productDiscount,
                java.util.List<com.commercetools.api.models.product_discount.ProductDiscountUpdateAction> actions) {
            return withId(productDiscount.getId()).post(builder -> com.commercetools.api.models.product_discount.ProductDiscountUpdate.builder()
                    .version(productDiscount.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyProductDiscountsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_discount.ProductDiscount> productDiscount,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.product_discount.ProductDiscountUpdateAction, com.commercetools.api.models.product_discount.ProductDiscountUpdateActionBuilder>> op) {
            return withId(productDiscount.getId()).post(builder -> com.commercetools.api.models.product_discount.ProductDiscountUpdate.builder()
                    .version(productDiscount.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.product_discount.ProductDiscountUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.product_discount.ProductDiscountUpdateAction, com.commercetools.api.models.product_discount.ProductDiscountUpdateActionBuilder, ByProjectKeyProductDiscountsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_discount.ProductDiscount> productDiscount) {
            return builder -> withId(productDiscount.getId())
                    .post(b -> com.commercetools.api.models.product_discount.ProductDiscountUpdate.builder()
                            .version(productDiscount.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.product_discount.ProductDiscountUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyProductDiscountsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_discount.ProductDiscount> productDiscount) {
            return withId(productDiscount.getId()).delete().withVersion(productDiscount.getVersion());
        }

        public ByProjectKeyProductDiscountsPost create(com.commercetools.api.models.product_discount.ProductDiscountDraft productDiscountDraft) {
            return post(productDiscountDraft);
        }

        public ByProjectKeyProductDiscountsPost create(
                UnaryOperator<com.commercetools.api.models.product_discount.ProductDiscountDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.product_discount.ProductDiscountDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyProductDiscountsGet,
        com.commercetools.api.models.product_discount.ProductDiscountPagedQueryResponse>'
  /product-projections:
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyProductProjectionsGet,
        com.commercetools.api.models.product.ProductProjectionPagedQueryResponse>'
  /product-types:
    (java-mixin): |
        public ByProjectKeyProductTypesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_type.ProductType> productType,
                java.util.List<com.commercetools.api.models.product_type.ProductTypeUpdateAction> actions) {
            return withId(productType.getId()).post(builder -> com.commercetools.api.models.product_type.ProductTypeUpdate.builder()
                    .version(productType.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyProductTypesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_type.ProductType> productType,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.product_type.ProductTypeUpdateAction, com.commercetools.api.models.product_type.ProductTypeUpdateActionBuilder>> op) {
            return withId(productType.getId()).post(builder -> com.commercetools.api.models.product_type.ProductTypeUpdate.builder()
                    .version(productType.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.product_type.ProductTypeUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.product_type.ProductTypeUpdateAction, com.commercetools.api.models.product_type.ProductTypeUpdateActionBuilder, ByProjectKeyProductTypesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_type.ProductType> productType) {
            return builder -> withId(productType.getId())
                    .post(b -> com.commercetools.api.models.product_type.ProductTypeUpdate.builder()
                            .version(productType.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.product_type.ProductTypeUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyProductTypesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.product_type.ProductType> productType) {
            return withId(productType.getId()).delete().withVersion(productType.getVersion());
        }

        public ByProjectKeyProductTypesPost create(com.commercetools.api.models.product_type.ProductTypeDraft productTypeDraft) {
            return post(productTypeDraft);
        }

        public ByProjectKeyProductTypesPost create(
                UnaryOperator<com.commercetools.api.models.product_type.ProductTypeDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.product_type.ProductTypeDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyProductTypesGet,
        com.commercetools.api.models.product_type.ProductTypePagedQueryResponse>'
    /key={key}:
      delete:
        (java-implements):
          'com.commercetools.api.client.ApiDeleteMethod<ByProjectKeyProductsKeyByKeyDelete, com.commercetools.api.models.product_type.ProductType>'
    /{ID}:
      delete:
        (java-implements):
          'com.commercetools.api.client.ApiDeleteMethod<ByProjectKeyProductTypesByIDDelete, com.commercetools.api.models.product_type.ProductType>'
  /quotes:
    (java-mixin): |
        public ByProjectKeyQuotesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote.Quote> quote,
                java.util.List<com.commercetools.api.models.quote.QuoteUpdateAction> actions) {
            return withId(quote.getId()).post(builder -> com.commercetools.api.models.quote.QuoteUpdate.builder()
                    .version(quote.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyQuotesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote.Quote> quote,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.quote.QuoteUpdateAction, com.commercetools.api.models.quote.QuoteUpdateActionBuilder>> op) {
            return withId(quote.getId()).post(builder -> com.commercetools.api.models.quote.QuoteUpdate.builder()
                    .version(quote.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.quote.QuoteUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.quote.QuoteUpdateAction, com.commercetools.api.models.quote.QuoteUpdateActionBuilder, ByProjectKeyQuotesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote.Quote> quote) {
            return builder -> withId(quote.getId())
                    .post(b -> com.commercetools.api.models.quote.QuoteUpdate.builder()
                            .version(quote.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.quote.QuoteUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyQuotesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote.Quote> quote) {
            return withId(quote.getId()).delete().withVersion(quote.getVersion());
        }

        public ByProjectKeyQuotesPost create(com.commercetools.api.models.quote.QuoteDraft quoteDraft) {
            return post(quoteDraft);
        }

        public ByProjectKeyQuotesPost create(
                UnaryOperator<com.commercetools.api.models.quote.QuoteDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.quote.QuoteDraftBuilder.of()).build());
        }
  /quote-requests:
    (java-mixin): |
        public ByProjectKeyQuoteRequestsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote_request.QuoteRequest> quoteRequest,
                java.util.List<com.commercetools.api.models.quote_request.QuoteRequestUpdateAction> actions) {
            return withId(quoteRequest.getId()).post(builder -> com.commercetools.api.models.quote_request.QuoteRequestUpdate.builder()
                    .version(quoteRequest.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyQuoteRequestsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote_request.QuoteRequest> quoteRequest,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.quote_request.QuoteRequestUpdateAction, com.commercetools.api.models.quote_request.QuoteRequestUpdateActionBuilder>> op) {
            return withId(quoteRequest.getId()).post(builder -> com.commercetools.api.models.quote_request.QuoteRequestUpdate.builder()
                    .version(quoteRequest.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.quote_request.QuoteRequestUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.quote_request.QuoteRequestUpdateAction, com.commercetools.api.models.quote_request.QuoteRequestUpdateActionBuilder, ByProjectKeyQuoteRequestsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote_request.QuoteRequest> quoteRequest) {
            return builder -> withId(quoteRequest.getId())
                    .post(b -> com.commercetools.api.models.quote_request.QuoteRequestUpdate.builder()
                            .version(quoteRequest.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.quote_request.QuoteRequestUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyQuoteRequestsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.quote_request.QuoteRequest> quoteRequest) {
            return withId(quoteRequest.getId()).delete().withVersion(quoteRequest.getVersion());
        }

        public ByProjectKeyQuoteRequestsPost create(com.commercetools.api.models.quote_request.QuoteRequestDraft quoteRequestDraft) {
            return post(quoteRequestDraft);
        }

        public ByProjectKeyQuoteRequestsPost create(
                UnaryOperator<com.commercetools.api.models.quote_request.QuoteRequestDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.quote_request.QuoteRequestDraftBuilder.of()).build());
        }
  /staged-quotes:
    (java-mixin): |
        public ByProjectKeyStagedQuotesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.staged_quote.StagedQuote> stagedQuote,
                java.util.List<com.commercetools.api.models.staged_quote.StagedQuoteUpdateAction> actions) {
            return withId(stagedQuote.getId()).post(builder -> com.commercetools.api.models.staged_quote.StagedQuoteUpdate.builder()
                    .version(stagedQuote.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyStagedQuotesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.staged_quote.StagedQuote> stagedQuote,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.staged_quote.StagedQuoteUpdateAction, com.commercetools.api.models.staged_quote.StagedQuoteUpdateActionBuilder>> op) {
            return withId(stagedQuote.getId()).post(builder -> com.commercetools.api.models.staged_quote.StagedQuoteUpdate.builder()
                    .version(stagedQuote.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.staged_quote.StagedQuoteUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.staged_quote.StagedQuoteUpdateAction, com.commercetools.api.models.staged_quote.StagedQuoteUpdateActionBuilder, ByProjectKeyStagedQuotesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.staged_quote.StagedQuote> stagedQuote) {
            return builder -> withId(stagedQuote.getId())
                    .post(b -> com.commercetools.api.models.staged_quote.StagedQuoteUpdate.builder()
                            .version(stagedQuote.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.staged_quote.StagedQuoteUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyStagedQuotesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.staged_quote.StagedQuote> stagedQuote) {
            return withId(stagedQuote.getId()).delete().withVersion(stagedQuote.getVersion());
        }

        public ByProjectKeyStagedQuotesPost create(com.commercetools.api.models.staged_quote.StagedQuoteDraft stagedQuoteDraft) {
            return post(stagedQuoteDraft);
        }

        public ByProjectKeyStagedQuotesPost create(
                UnaryOperator<com.commercetools.api.models.staged_quote.StagedQuoteDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.staged_quote.StagedQuoteDraftBuilder.of()).build());
        }
  /reviews:
    (java-mixin): |
        public ByProjectKeyReviewsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.review.Review> review,
                java.util.List<com.commercetools.api.models.review.ReviewUpdateAction> actions) {
            return withId(review.getId()).post(builder -> com.commercetools.api.models.review.ReviewUpdate.builder()
                    .version(review.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyReviewsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.review.Review> review,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.review.ReviewUpdateAction, com.commercetools.api.models.review.ReviewUpdateActionBuilder>> op) {
            return withId(review.getId()).post(builder -> com.commercetools.api.models.review.ReviewUpdate.builder()
                    .version(review.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.review.ReviewUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.review.ReviewUpdateAction, com.commercetools.api.models.review.ReviewUpdateActionBuilder, ByProjectKeyReviewsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.review.Review> review) {
            return builder -> withId(review.getId())
                    .post(b -> com.commercetools.api.models.review.ReviewUpdate.builder()
                            .version(review.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.review.ReviewUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyReviewsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.review.Review> review) {
            return withId(review.getId()).delete().withVersion(review.getVersion());
        }

        public ByProjectKeyReviewsPost create(com.commercetools.api.models.review.ReviewDraft reviewDraft) {
            return post(reviewDraft);
        }

        public ByProjectKeyReviewsPost create(
                UnaryOperator<com.commercetools.api.models.review.ReviewDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.review.ReviewDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyReviewsGet,
        com.commercetools.api.models.review.ReviewPagedQueryResponse>'
  /shipping-methods:
    (java-mixin): |
        public ByProjectKeyShippingMethodsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shipping_method.ShippingMethod> shippingMethod,
                java.util.List<com.commercetools.api.models.shipping_method.ShippingMethodUpdateAction> actions) {
            return withId(shippingMethod.getId()).post(builder -> com.commercetools.api.models.shipping_method.ShippingMethodUpdate.builder()
                    .version(shippingMethod.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyShippingMethodsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shipping_method.ShippingMethod> shippingMethod,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.shipping_method.ShippingMethodUpdateAction, com.commercetools.api.models.shipping_method.ShippingMethodUpdateActionBuilder>> op) {
            return withId(shippingMethod.getId()).post(builder -> com.commercetools.api.models.shipping_method.ShippingMethodUpdate.builder()
                    .version(shippingMethod.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.shipping_method.ShippingMethodUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.shipping_method.ShippingMethodUpdateAction, com.commercetools.api.models.shipping_method.ShippingMethodUpdateActionBuilder, ByProjectKeyShippingMethodsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shipping_method.ShippingMethod> shippingMethod) {
            return builder -> withId(shippingMethod.getId())
                    .post(b -> com.commercetools.api.models.shipping_method.ShippingMethodUpdate.builder()
                            .version(shippingMethod.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.shipping_method.ShippingMethodUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyShippingMethodsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shipping_method.ShippingMethod> shippingMethod) {
            return withId(shippingMethod.getId()).delete().withVersion(shippingMethod.getVersion());
        }

        public ByProjectKeyShippingMethodsPost create(com.commercetools.api.models.shipping_method.ShippingMethodDraft shippingMethodDraft) {
            return post(shippingMethodDraft);
        }

        public ByProjectKeyShippingMethodsPost create(
                UnaryOperator<com.commercetools.api.models.shipping_method.ShippingMethodDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.shipping_method.ShippingMethodDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyShippingMethodsGet,
        com.commercetools.api.models.shipping_method.ShippingMethodPagedQueryResponse>'
  /shopping-lists:
    (java-mixin): |
        public ByProjectKeyShoppingListsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shopping_list.ShoppingList> shoppingList,
                java.util.List<com.commercetools.api.models.shopping_list.ShoppingListUpdateAction> actions) {
            return withId(shoppingList.getId()).post(builder -> com.commercetools.api.models.shopping_list.ShoppingListUpdate.builder()
                    .version(shoppingList.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyShoppingListsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shopping_list.ShoppingList> shoppingList,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.shopping_list.ShoppingListUpdateAction, com.commercetools.api.models.shopping_list.ShoppingListUpdateActionBuilder>> op) {
            return withId(shoppingList.getId()).post(builder -> com.commercetools.api.models.shopping_list.ShoppingListUpdate.builder()
                    .version(shoppingList.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.shopping_list.ShoppingListUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.shopping_list.ShoppingListUpdateAction, com.commercetools.api.models.shopping_list.ShoppingListUpdateActionBuilder, ByProjectKeyShoppingListsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shopping_list.ShoppingList> shoppingList) {
            return builder -> withId(shoppingList.getId())
                    .post(b -> com.commercetools.api.models.shopping_list.ShoppingListUpdate.builder()
                            .version(shoppingList.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.shopping_list.ShoppingListUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyShoppingListsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.shopping_list.ShoppingList> shoppingList) {
            return withId(shoppingList.getId()).delete().withVersion(shoppingList.getVersion());
        }

        public ByProjectKeyShoppingListsPost create(com.commercetools.api.models.shopping_list.ShoppingListDraft shoppingListDraft) {
            return post(shoppingListDraft);
        }

        public ByProjectKeyShoppingListsPost create(
                UnaryOperator<com.commercetools.api.models.shopping_list.ShoppingListDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.shopping_list.ShoppingListDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyShoppingListsGet,
        com.commercetools.api.models.shopping_list.ShoppingListPagedQueryResponse>'
  /states:
    (java-mixin): |
        public ByProjectKeyStatesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.state.State> state,
                java.util.List<com.commercetools.api.models.state.StateUpdateAction> actions) {
            return withId(state.getId()).post(builder -> com.commercetools.api.models.state.StateUpdate.builder()
                    .version(state.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyStatesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.state.State> state,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.state.StateUpdateAction, com.commercetools.api.models.state.StateUpdateActionBuilder>> op) {
            return withId(state.getId()).post(builder -> com.commercetools.api.models.state.StateUpdate.builder()
                    .version(state.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.state.StateUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.state.StateUpdateAction, com.commercetools.api.models.state.StateUpdateActionBuilder, ByProjectKeyStatesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.state.State> state) {
            return builder -> withId(state.getId())
                    .post(b -> com.commercetools.api.models.state.StateUpdate.builder()
                            .version(state.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.state.StateUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyStatesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.state.State> state) {
            return withId(state.getId()).delete().withVersion(state.getVersion());
        }

        public ByProjectKeyStatesPost create(com.commercetools.api.models.state.StateDraft stateDraft) {
            return post(stateDraft);
        }

        public ByProjectKeyStatesPost create(
                UnaryOperator<com.commercetools.api.models.state.StateDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.state.StateDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyStatesGet,
        com.commercetools.api.models.state.StatePagedQueryResponse>'
  /subscriptions:
    (java-mixin): |
        public ByProjectKeySubscriptionsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.subscription.Subscription> subscription,
                java.util.List<com.commercetools.api.models.subscription.SubscriptionUpdateAction> actions) {
            return withId(subscription.getId()).post(builder -> com.commercetools.api.models.subscription.SubscriptionUpdate.builder()
                    .version(subscription.getVersion())
                    .actions(actions));
        }

        public ByProjectKeySubscriptionsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.subscription.Subscription> subscription,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.subscription.SubscriptionUpdateAction, com.commercetools.api.models.subscription.SubscriptionUpdateActionBuilder>> op) {
            return withId(subscription.getId()).post(builder -> com.commercetools.api.models.subscription.SubscriptionUpdate.builder()
                    .version(subscription.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.subscription.SubscriptionUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.subscription.SubscriptionUpdateAction, com.commercetools.api.models.subscription.SubscriptionUpdateActionBuilder, ByProjectKeySubscriptionsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.subscription.Subscription> subscription) {
            return builder -> withId(subscription.getId())
                    .post(b -> com.commercetools.api.models.subscription.SubscriptionUpdate.builder()
                            .version(subscription.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.subscription.SubscriptionUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeySubscriptionsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.subscription.Subscription> subscription) {
            return withId(subscription.getId()).delete().withVersion(subscription.getVersion());
        }

        public ByProjectKeySubscriptionsPost create(com.commercetools.api.models.subscription.SubscriptionDraft subscriptionDraft) {
            return post(subscriptionDraft);
        }

        public ByProjectKeySubscriptionsPost create(
                UnaryOperator<com.commercetools.api.models.subscription.SubscriptionDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.subscription.SubscriptionDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeySubscriptionsGet,
        com.commercetools.api.models.subscription.SubscriptionPagedQueryResponse>'
  /tax-categories:
    (java-mixin): |
        public ByProjectKeyTaxCategoriesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.tax_category.TaxCategory> taxCategory,
                java.util.List<com.commercetools.api.models.tax_category.TaxCategoryUpdateAction> actions) {
            return withId(taxCategory.getId()).post(builder -> com.commercetools.api.models.tax_category.TaxCategoryUpdate.builder()
                    .version(taxCategory.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyTaxCategoriesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.tax_category.TaxCategory> taxCategory,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.tax_category.TaxCategoryUpdateAction, com.commercetools.api.models.tax_category.TaxCategoryUpdateActionBuilder>> op) {
            return withId(taxCategory.getId()).post(builder -> com.commercetools.api.models.tax_category.TaxCategoryUpdate.builder()
                    .version(taxCategory.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.tax_category.TaxCategoryUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.tax_category.TaxCategoryUpdateAction, com.commercetools.api.models.tax_category.TaxCategoryUpdateActionBuilder, ByProjectKeyTaxCategoriesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.tax_category.TaxCategory> taxCategory) {
            return builder -> withId(taxCategory.getId())
                    .post(b -> com.commercetools.api.models.tax_category.TaxCategoryUpdate.builder()
                            .version(taxCategory.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.tax_category.TaxCategoryUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyTaxCategoriesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.tax_category.TaxCategory> taxCategory) {
            return withId(taxCategory.getId()).delete().withVersion(taxCategory.getVersion());
        }

        public ByProjectKeyTaxCategoriesPost create(com.commercetools.api.models.tax_category.TaxCategoryDraft taxCategoryDraft) {
            return post(taxCategoryDraft);
        }

        public ByProjectKeyTaxCategoriesPost create(
                UnaryOperator<com.commercetools.api.models.tax_category.TaxCategoryDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.tax_category.TaxCategoryDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyTaxCategoriesGet,
        com.commercetools.api.models.tax_category.TaxCategoryPagedQueryResponse>'
  /types:
    (java-mixin): |
        public ByProjectKeyTypesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.type.Type> type,
                java.util.List<com.commercetools.api.models.type.TypeUpdateAction> actions) {
            return withId(type.getId()).post(builder -> com.commercetools.api.models.type.TypeUpdate.builder()
                    .version(type.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyTypesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.type.Type> type,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.type.TypeUpdateAction, com.commercetools.api.models.type.TypeUpdateActionBuilder>> op) {
            return withId(type.getId()).post(builder -> com.commercetools.api.models.type.TypeUpdate.builder()
                    .version(type.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.type.TypeUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.type.TypeUpdateAction, com.commercetools.api.models.type.TypeUpdateActionBuilder, ByProjectKeyTypesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.type.Type> type) {
            return builder -> withId(type.getId())
                    .post(b -> com.commercetools.api.models.type.TypeUpdate.builder()
                            .version(type.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.type.TypeUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyTypesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.type.Type> type) {
            return withId(type.getId()).delete().withVersion(type.getVersion());
        }

        public ByProjectKeyTypesPost create(com.commercetools.api.models.type.TypeDraft typeDraft) {
            return post(typeDraft);
        }

        public ByProjectKeyTypesPost create(
                UnaryOperator<com.commercetools.api.models.type.TypeDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.type.TypeDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyTypesGet,
        com.commercetools.api.models.type.TypePagedQueryResponse>'
  /zones:
    (java-mixin): |
        public ByProjectKeyZonesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.zone.Zone> zone,
                java.util.List<com.commercetools.api.models.zone.ZoneUpdateAction> actions) {
            return withId(zone.getId()).post(builder -> com.commercetools.api.models.zone.ZoneUpdate.builder()
                    .version(zone.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyZonesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.zone.Zone> zone,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.zone.ZoneUpdateAction, com.commercetools.api.models.zone.ZoneUpdateActionBuilder>> op) {
            return withId(zone.getId()).post(builder -> com.commercetools.api.models.zone.ZoneUpdate.builder()
                    .version(zone.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.zone.ZoneUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.zone.ZoneUpdateAction, com.commercetools.api.models.zone.ZoneUpdateActionBuilder, ByProjectKeyZonesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.zone.Zone> zone) {
            return builder -> withId(zone.getId())
                    .post(b -> com.commercetools.api.models.zone.ZoneUpdate.builder()
                            .version(zone.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.zone.ZoneUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyZonesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.zone.Zone> zone) {
            return withId(zone.getId()).delete().withVersion(zone.getVersion());
        }

        public ByProjectKeyZonesPost create(com.commercetools.api.models.zone.ZoneDraft zoneDraft) {
            return post(zoneDraft);
        }

        public ByProjectKeyZonesPost create(
                UnaryOperator<com.commercetools.api.models.zone.ZoneDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.zone.ZoneDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyZonesGet,
        com.commercetools.api.models.zone.ZonePagedQueryResponse>'
  /extensions:
    (java-mixin): |
        public ByProjectKeyExtensionsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.extension.Extension> extension,
                java.util.List<com.commercetools.api.models.extension.ExtensionUpdateAction> actions) {
            return withId(extension.getId()).post(builder -> com.commercetools.api.models.extension.ExtensionUpdate.builder()
                    .version(extension.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyExtensionsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.extension.Extension> extension,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.extension.ExtensionUpdateAction, com.commercetools.api.models.extension.ExtensionUpdateActionBuilder>> op) {
            return withId(extension.getId()).post(builder -> com.commercetools.api.models.extension.ExtensionUpdate.builder()
                    .version(extension.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.extension.ExtensionUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.extension.ExtensionUpdateAction, com.commercetools.api.models.extension.ExtensionUpdateActionBuilder, ByProjectKeyExtensionsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.extension.Extension> extension) {
            return builder -> withId(extension.getId())
                    .post(b -> com.commercetools.api.models.extension.ExtensionUpdate.builder()
                            .version(extension.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.extension.ExtensionUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyExtensionsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.extension.Extension> extension) {
            return withId(extension.getId()).delete().withVersion(extension.getVersion());
        }

        public ByProjectKeyExtensionsPost create(com.commercetools.api.models.extension.ExtensionDraft extensionDraft) {
            return post(extensionDraft);
        }

        public ByProjectKeyExtensionsPost create(
                UnaryOperator<com.commercetools.api.models.extension.ExtensionDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.extension.ExtensionDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyExtensionsGet,
        com.commercetools.api.models.extension.ExtensionPagedQueryResponse>'
  /stores:
    (java-mixin): |
        public ByProjectKeyStoresByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.store.Store> store,
                java.util.List<com.commercetools.api.models.store.StoreUpdateAction> actions) {
            return withId(store.getId()).post(builder -> com.commercetools.api.models.store.StoreUpdate.builder()
                    .version(store.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyStoresByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.store.Store> store,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.store.StoreUpdateAction, com.commercetools.api.models.store.StoreUpdateActionBuilder>> op) {
            return withId(store.getId()).post(builder -> com.commercetools.api.models.store.StoreUpdate.builder()
                    .version(store.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.store.StoreUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.store.StoreUpdateAction, com.commercetools.api.models.store.StoreUpdateActionBuilder, ByProjectKeyStoresByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.store.Store> store) {
            return builder -> withId(store.getId())
                    .post(b -> com.commercetools.api.models.store.StoreUpdate.builder()
                            .version(store.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.store.StoreUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyStoresByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.store.Store> store) {
            return withId(store.getId()).delete().withVersion(store.getVersion());
        }

        public ByProjectKeyStoresPost create(com.commercetools.api.models.store.StoreDraft storeDraft) {
            return post(storeDraft);
        }

        public ByProjectKeyStoresPost create(
                UnaryOperator<com.commercetools.api.models.store.StoreDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.store.StoreDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyStoresGet,
        com.commercetools.api.models.store.StorePagedQueryResponse>'
  /standalone-prices:
    (java-mixin): |
        public ByProjectKeyStandalonePricesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.standalone_price.StandalonePrice> standalonePrice,
                java.util.List<com.commercetools.api.models.standalone_price.StandalonePriceUpdateAction> actions) {
            return withId(standalonePrice.getId()).post(builder -> com.commercetools.api.models.standalone_price.StandalonePriceUpdate.builder()
                    .version(standalonePrice.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyStandalonePricesByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.standalone_price.StandalonePrice> standalonePrice,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.standalone_price.StandalonePriceUpdateAction, com.commercetools.api.models.standalone_price.StandalonePriceUpdateActionBuilder>> op) {
            return withId(standalonePrice.getId()).post(builder -> com.commercetools.api.models.standalone_price.StandalonePriceUpdate.builder()
                    .version(standalonePrice.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.standalone_price.StandalonePriceUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.standalone_price.StandalonePriceUpdateAction, com.commercetools.api.models.standalone_price.StandalonePriceUpdateActionBuilder, ByProjectKeyStandalonePricesByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.standalone_price.StandalonePrice> standalonePrice) {
            return builder -> withId(standalonePrice.getId())
                    .post(b -> com.commercetools.api.models.standalone_price.StandalonePriceUpdate.builder()
                            .version(standalonePrice.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.standalone_price.StandalonePriceUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyStandalonePricesByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.standalone_price.StandalonePrice> standalonePrice) {
            return withId(standalonePrice.getId()).delete().withVersion(standalonePrice.getVersion());
        }

        public ByProjectKeyStandalonePricesPost create(com.commercetools.api.models.standalone_price.StandalonePriceDraft standalonePriceDraft) {
            return post(standalonePriceDraft);
        }

        public ByProjectKeyStandalonePricesPost create(
                UnaryOperator<com.commercetools.api.models.standalone_price.StandalonePriceDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.standalone_price.StandalonePriceDraftBuilder.of()).build());
        }
    get:
      (java-implements):
        'com.commercetools.api.models.PagedQueryResourceRequest<ByProjectKeyStandalonePricesGet,
        com.commercetools.api.models.standalone_price.StandalonePricePagedQueryResponse>'
  /attribute-groups:
    (java-mixin): |
        public ByProjectKeyAttributeGroupsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.attribute_group.AttributeGroup> attributeGroup,
                java.util.List<com.commercetools.api.models.attribute_group.AttributeGroupUpdateAction> actions) {
            return withId(attributeGroup.getId()).post(builder -> com.commercetools.api.models.attribute_group.AttributeGroupUpdate.builder()
                    .version(attributeGroup.getVersion())
                    .actions(actions));
        }

        public ByProjectKeyAttributeGroupsByIDPost update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.attribute_group.AttributeGroup> attributeGroup,
                UnaryOperator<UpdateActionBuilder<com.commercetools.api.models.attribute_group.AttributeGroupUpdateAction, com.commercetools.api.models.attribute_group.AttributeGroupUpdateActionBuilder>> op) {
            return withId(attributeGroup.getId()).post(builder -> com.commercetools.api.models.attribute_group.AttributeGroupUpdate.builder()
                    .version(attributeGroup.getVersion())
                    .actions(op.apply(UpdateActionBuilder
                            .of(com.commercetools.api.models.attribute_group.AttributeGroupUpdateActionBuilder::of)).actions));
        }

        public WithUpdateActionBuilder<com.commercetools.api.models.attribute_group.AttributeGroupUpdateAction, com.commercetools.api.models.attribute_group.AttributeGroupUpdateActionBuilder, ByProjectKeyAttributeGroupsByIDPost> update(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.attribute_group.AttributeGroup> attributeGroup) {
            return builder -> withId(attributeGroup.getId())
                    .post(b -> com.commercetools.api.models.attribute_group.AttributeGroupUpdate.builder()
                            .version(attributeGroup.getVersion())
                            .actions(builder.apply(UpdateActionBuilder
                                    .of(com.commercetools.api.models.attribute_group.AttributeGroupUpdateActionBuilder::of)).actions));
        }

        public ByProjectKeyAttributeGroupsByIDDelete delete(
                com.commercetools.api.models.Versioned<com.commercetools.api.models.attribute_group.AttributeGroup> attributeGroup) {
            return withId(attributeGroup.getId()).delete().withVersion(attributeGroup.getVersion());
        }

        public ByProjectKeyAttributeGroupsPost create(com.commercetools.api.models.attribute_group.AttributeGroupDraft attributeGroupDraft) {
            return post(attributeGroupDraft);
        }

        public ByProjectKeyAttributeGroupsPost create(
                UnaryOperator<com.commercetools.api.models.attribute_group.AttributeGroupDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.attribute_group.AttributeGroupDraftBuilder.of()).build());
        }
  /api-clients:
    (java-mixin): |
        public ByProjectKeyApiClientsByIDDelete delete(
                com.commercetools.api.models.Identifiable<com.commercetools.api.models.api_client.ApiClient> apiClient) {
            return withId(apiClient.getId()).delete();
        }

        public ByProjectKeyApiClientsPost create(com.commercetools.api.models.api_client.ApiClientDraft apiClientDraft) {
            return post(apiClientDraft);
        }

        public ByProjectKeyApiClientsPost create(
                UnaryOperator<com.commercetools.api.models.api_client.ApiClientDraftBuilder> op) {
            return post(op.apply(com.commercetools.api.models.api_client.ApiClientDraftBuilder.of()).build());
        }
