buildscript {
    apply from: "$rootDir/gradle-scripts/repositories.gradle"
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones
    id 'idea'

    id 'maven-publish'
    id 'signing'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope

    id "com.diffplug.spotless" version "6.1.2"

    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.jk1.dependency-license-report' version '2.0'
}

configurations {
    taglet {
        resolutionStrategy.force("net.sourceforge.plantuml:plantuml:1.2022.0")
    }
}

dependencies {
    taglet 'com.commercetools.build.taglets:commercetools-taglets:2.1.4'
    taglet 'org.jdrupes.taglets:plantuml-taglet:2.0.0'
}

import java.text.SimpleDateFormat

apply plugin: 'versioning'

def globalVersion = new Version(version)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        thisVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}

allprojects {
    apply from: "$rootDir/gradle-scripts/repositories.gradle"
    description = "The e-commerce SDK from commercetools for Java"
}

apply from: "$rootDir/gradle-scripts/repositories.gradle"
apply from: "$rootDir/gradle-scripts/extensions.gradle"
apply from: "$rootDir/gradle-scripts/jacoco.gradle"
apply from: "$rootDir/gradle-scripts/spotless.gradle"

group='com.commercetools.sdk'

subprojects { project ->

    apply from: "$rootDir/gradle-scripts/subproject-plugins.gradle"
    apply from: "$rootDir/gradle-scripts/subproject-dependencies.gradle"
    apply from: "$rootDir/gradle-scripts/subproject-config.gradle"

    group='com.commercetools.sdk'

    version = globalVersion

    check.dependsOn(integrationTest)

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

apply from: "$rootDir/gradle-scripts/publishing.gradle"


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.*

apply plugin: 'com.github.jk1.dependency-license-report'
licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/licenses"

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
    configurations = ['runtimeClasspath']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL

    // Don't exclude bom dependencies.
    // If set to true, then all boms will be excluded from the report
    excludeBoms = true

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")

    renderers = [new JsonReportRenderer("index.json", false)]
    filters = [new LicenseBundleNormalizer(bundlePath: "$projectDir/license-normalizer-bundle.json")]
}

generateLicenseReport {
    outputs.upToDateWhen { false }
}

def excludeProjects = [
        'internal-docs'
]
subprojects { project ->
    if (project.file("build.gradle").exists() && !excludeProjects.contains(project.name)) {
        apply plugin: 'com.github.jk1.dependency-license-report'
        licenseReport {
            // Set output directory for the report data.
            // Defaults to ${project.buildDir}/reports/dependency-license.
            outputDir = "$rootDir/licenses/${project.name}"
            projects = [project]
            // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
            configurations = ['runtimeClasspath']
            // Use 'ALL' to dynamically resolve all configurations:
            // configurations = ALL

            // Don't exclude bom dependencies.
            // If set to true, then all boms will be excluded from the report
            excludeBoms = true

            // This is for the allowed-licenses-file in checkLicense Task
            // Accepts File, URL or String path to local or remote file
            allowedLicensesFile = new File("$rootDir/allowed-licenses.json")

            renderers = [new JsonReportRenderer("index.json", false)]
            filters = [new LicenseBundleNormalizer(bundlePath: "$rootDir/license-normalizer-bundle.json")]
        }

        checkLicense.dependsOn(':generateLicenseReport')
        generateLicenseReport {
            outputs.upToDateWhen { false }
        }

    }

    task allDeps(type: DependencyReportTask) {}
}

def documentationProjects= [
        ":commercetools:commercetools-http-client",
        ":commercetools:commercetools-sdk-java-api",
        ":commercetools:commercetools-sdk-java-importapi",
        ":commercetools:commercetools-sdk-java-ml",
        ":commercetools:commercetools-sdk-compat-v1",
        ":commercetools:commercetools-sdk-java-history",
        ":rmf:rmf-java-base",
        ":commercetools:commercetools-apachehttp-client",
        ":commercetools:commercetools-okhttp-client3",
        ":commercetools:commercetools-okhttp-client4",
        ":commercetools:commercetools-money",
        ":commercetools:internal-docs",
        ":rmf:okhttp-client"
]

task alljavadoc(type: Javadoc) {
    source documentationProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(documentationProjects.collect { project(it).sourceSets.test.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    excludes = [
            '**/*Test.java',
            '**/test/*.java'
    ]
    options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor false
        noTimestamp = true

        links 'https://docs.oracle.com/javase/8/docs/api/', "https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/${versions.jackson}/", 'https://commercetools.github.io/commercetools-jvm-sdk/apidocs/'
        overview = "src/main/javadoc/overview.html"
        bottom = """
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.8.0/styles/default.min.css">
            <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.8.0/highlight.min.js"></script>
            <script>hljs.initHighlightingOnLoad();</script>
            <span id="custom-javascripts"></span>
            <script src="{@docRoot}/resources/javascripts/main.js"></script>
            <link rel="stylesheet" href="{@docRoot}/resources/stylesheets/main.css">
        """
        taglets = ['com.commercetools.build.taglets.CodeTaglet', 'com.commercetools.build.taglets.FileIncludeTaglet', 'org.jdrupes.taglets.plantUml.StartUml', 'org.jdrupes.taglets.plantUml.EndUml', 'org.jdrupes.taglets.plantUml.PlantUml']
        tagletPath = configurations.taglet.files as List
        addBooleanOption('-allow-script-in-comments', true)
        addStringOption('Xdoclint:missing,accessibility,reference', '-quiet')
        addBooleanOption('linksource', true)
        groups = [
                "API": ["com.commercetools.api.*"],
                "History": ["com.commercetools.history.*"],
                "Import": ["com.commercetools.importapi.*"],
                "ML": ["com.commercetools.ml.*"],
                "Base Packages": ["io.vrap.rmf.base.*"],
                "HTTP Clients": [
                        "com.commercetools.http.*",
                        "io.vrap.rmf.okhttp.*"
                ]
        ]
        addStringOption('source', '8')
    }

    doLast {
        copy{
            from "src/main/javadoc/resources"
            into "${buildDir}/docs/javadoc/resources"
        }
    }
}

tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'commercetools: \"[^\\s]+\"', replace: "commercetools: \"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
        ant.replaceregexp(match: '<commercetools.version>.+</commercetools.version>', replace: "<commercetools.version>${globalVersion}</commercetools.version>", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
    }
}

tasks.register("writeVersionToExamples") {
    doLast {
        ant.replaceregexp(match: 'commercetools: \"[^\\s]+\"', replace: "commercetools: \"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: projectDir) {
                include(name: 'examples/spring/build.gradle')
            }
        }
        ant.replaceregexp(match: '<commercetools.version>.+</commercetools.version>', replace: "<commercetools.version>${globalVersion}</commercetools.version>", flags:'g', byline:true) {
            fileset(dir: projectDir) {
                include(name: 'examples/maven-okhttp3/pom.xml')
                include(name: 'examples/maven-okhttp4/pom.xml')
            }
        }
    }
}
