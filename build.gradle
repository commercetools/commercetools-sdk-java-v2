buildscript {
    apply from: "$rootDir/gradle-scripts/repositories.gradle"
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones
    id 'idea'

    id 'maven-publish'
    id 'signing'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope

    id "com.diffplug.spotless" version "6.0.2"

    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.github.jk1.dependency-license-report' version '2.0'
}

configurations {
    taglet {
        resolutionStrategy.force("net.sourceforge.plantuml:plantuml:1.2021.15")
    }
}

dependencies {
    taglet 'com.commercetools.build.taglets:commercetools-taglets:2.1.4'
    taglet 'org.jdrupes.taglets:plantuml-taglet:2.0.0'
}

import java.text.SimpleDateFormat

apply plugin: 'versioning'

def globalVersion = new Version(version)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        thisVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}

allprojects {
    apply from: "$rootDir/gradle-scripts/repositories.gradle"
    description = "The e-commerce SDK from commercetools for Java"
}

apply from: "$rootDir/gradle-scripts/repositories.gradle"
apply from: "$rootDir/gradle-scripts/extensions.gradle"
apply from: "$rootDir/gradle-scripts/alljavadoc.gradle"
apply from: "$rootDir/gradle-scripts/jacoco.gradle"
apply from: "$rootDir/gradle-scripts/global-tasks.gradle"
apply from: "$rootDir/gradle-scripts/spotless.gradle"

group='com.commercetools.sdk'

subprojects { project ->

    apply from: "$rootDir/gradle-scripts/subproject-plugins.gradle"
    apply from: "$rootDir/gradle-scripts/subproject-dependencies.gradle"
    apply from: "$rootDir/gradle-scripts/subproject-config.gradle"

    group='com.commercetools.sdk'

    version = globalVersion

    check.dependsOn(integrationTest)

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

apply from: "$rootDir/gradle-scripts/publishing.gradle"


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.*

apply plugin: 'com.github.jk1.dependency-license-report'
licenseReport {
    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/licenses"

    // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
    configurations = ['runtimeClasspath']
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL

    // Don't exclude bom dependencies.
    // If set to true, then all boms will be excluded from the report
    excludeBoms = true

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")

    renderers = [new JsonReportRenderer("index.json", true)]
    filters = [new LicenseBundleNormalizer(bundlePath: "$projectDir/license-normalizer-bundle.json")]
}
def excludeProjects = [
        'internal-docs'
]
subprojects { project ->
    if (project.file("build.gradle").exists() && !excludeProjects.contains(project.name)) {
        apply plugin: 'com.github.jk1.dependency-license-report'
        licenseReport {
            // Set output directory for the report data.
            // Defaults to ${project.buildDir}/reports/dependency-license.
            outputDir = "$rootDir/licenses"
            projects = [project]
            // Adjust the configurations to fetch dependencies, e.g. for Android projects. Default is 'runtimeClasspath'
            configurations = ['runtimeClasspath']
            // Use 'ALL' to dynamically resolve all configurations:
            // configurations = ALL

            // Don't exclude bom dependencies.
            // If set to true, then all boms will be excluded from the report
            excludeBoms = true

            // This is for the allowed-licenses-file in checkLicense Task
            // Accepts File, URL or String path to local or remote file
            allowedLicensesFile = new File("$rootDir/allowed-licenses.json")

            renderers = [new JsonReportRenderer("${project.name}.json", true)]
            filters = [new LicenseBundleNormalizer(bundlePath: "$rootDir/license-normalizer-bundle.json")]
        }
    }
    task allDeps(type: DependencyReportTask) {}
}
