buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones

    id 'idea'

    id 'maven'
    id 'maven-publish'
    id 'signing'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope

    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

import java.text.SimpleDateFormat

def globalVersion = new Version(version)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        thisVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}

allprojects {
    description = "The e-commerce SDK from commercetools for Java"
}

tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'commercetools: \"[^\\s]+\"', replace: "commercetools: \"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
        ant.replaceregexp(match: '<commercetools.version>.+</commercetools.version>', replace: "<commercetools.version>${globalVersion}</commercetools.version>", flags:'g', byline:true) {
            fileset(dir: projectDir, includes: 'README.md')
        }
    }
}

ext {
    versions = [
            slf4j: "1.7.21",
            logback: "1.1.7",
            findbugs: "3.0.2",
            jackson: "2.10.1",
            junit: "4.12",
            validation: "2.0.1.Final",
            assertJ: "3.8.0",
            gson: "2.8.6",
            awaitility: "4.0.2",
            failsafe: "2.4.0"
    ]

    commons = [
            lang3: 'org.apache.commons:commons-lang3:3.10',
            cli: 'commons-cli:commons-cli:1.4',
            io: 'commons-io:commons-io:2.6',

    ]

    scmProjectName = rootProject.name
    scmRepo = 'github.com'
    scmProjectPath = "commercetools/commercetools-sdk-java-v2.git"  // github relative path with .git extension
    scmProjectUrl = "https://$scmRepo/$scmProjectPath"      // just as web-page
    scmHttpsUrl = "https://$scmRepo/$scmProjectPath"        // common VCS read access
    scmSshUrl = "git@$scmRepo:$scmProjectPath"              // developers VCS read-write repo
    SNAPSHOT_SUFFIX = "-SNAPSHOT"
    versionWIP = "development$SNAPSHOT_SUFFIX"
}

// maven-specific publishing settings
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        connection "scm:git:$scmHttpsUrl"
        developerConnection "scm:git:$scmSshUrl"
        url "$scmProjectUrl"
    }
}


group='com.commercetools.sdk'

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('CTP_OSS_USER')
            password = System.getenv('CTP_OSS_SECRET')
        }
    }
}

subprojects { project ->
    repositories {
        mavenCentral()
    }

    apply plugin: 'idea'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    apply plugin: 'java'
    apply plugin: 'java-library' // needed to make sure that transitive deps have 'compile' scope

    group='com.commercetools.sdk'

    version = globalVersion

    sourceSets {
        itest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            java {
            }
        }
    }

    configurations {
        itestImplementation.extendsFrom(testImplementation)
        itestApi.extendsFrom(testApi)
        itestRuntimeOnly.extendsFrom(testRuntimeOnly)
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath

        options {
            setMemberLevel JavadocMemberLevel.PUBLIC
            setAuthor false
            noTimestamp = true

            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }

    ext {
        buildInfoPath = "build/generated/src/main/java/io/vrap/rmf/base/client/"
        buildInfoPackage = "io.vrap.rmf.base.client"
    }

    if (project.file("build.gradle").exists()) {

        publishing {
            publications {
                Maven(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    groupId group
                    artifactId project.name
                    version version

                    pom {
                        name = project.name
                        description = project.description
                        developers {
                            developer {
                                id = "jenschude"
                                name = "Jens Schulze"
                                email = "jens.schulze@commercetools.com"
                            }
                        }
                        url = scmHttpsUrl
                    }
                    pom.withXml {
                        def root = asNode()
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        signing {
            useGpgCmd()
            sign publishing.publications.Maven
        }
    }

    sourceCompatibility = 1.8
}

def exportedProjects= [
        ":commercetools:commercetools-http-client",
        ":commercetools:commercetools-sdk-java-api",
        ":commercetools:commercetools-sdk-java-importapi",
        ":commercetools:commercetools-sdk-java-ml",
        ":rmf:rmf-java-base",
        ":commercetools:commercetools-okhttp-client3",
        ":commercetools:commercetools-okhttp-client4",
        ":rmf:okhttp-client",
]
task alljavadoc(type: Javadoc) {
    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    options.noTimestamp = true
}
