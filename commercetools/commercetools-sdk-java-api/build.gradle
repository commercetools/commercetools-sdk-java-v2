
dependencies {
    api project(':rmf:rmf-java-base')
    api project(':commercetools:commercetools-money')
    api jackson_core.annotations
    api jackson_core.databind
    implementation google.findbugs
    implementation javax.validation
    api slf4j.api
    api commons.lang3

    testImplementation project(':commercetools:commercetools-http-client')
    testImplementation project(':commercetools:commercetools-okhttp-client4')
    testImplementation project(':commercetools:commercetools-apachehttp-client')
    testImplementation commons.io version commons.io_version

    testImplementation google.gson
}

sourceSets.main.java.srcDirs += "src/main/java-generated"
sourceSets.main.java.srcDirs += "src/main/java-predicates-generated"
sourceSets.test.java.srcDirs += "src/test/java-generated"


projectDir.toPath().resolve("src/main/java-generated/com/commercetools/api/models/").eachDir { dir ->
    def dirname = dir.toFile().name
    def modelTask = tasks.register("models_$dirname", Jar) {
        from sourceSets.main.output

        include "**/models/$dirname/**"
        archiveBaseName = project.name + "-models-$dirname"
    }
    publishing {
        publications {
            it.create("Maven$dirname", org.gradle.api.publish.maven.MavenPublication, {
                artifact modelTask
                artifact javadocJar
                artifact sourcesJar
                groupId group
                artifactId project.name + "-models_$dirname"
                version version

                pom {
                    name = project.name + "-models_$dirname"
                    description = project.description
                    developers {
                        developer {
                            id = "jenschude"
                            name = "Jens Schulze"
                            email = "jens.schulze@commercetools.com"
                        }
                    }
                    url = scmHttpsUrl
                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    scm {
                        connection = "scm:git:$scmHttpsUrl"
                        developerConnection = "scm:git:$scmSshUrl"
                        url = "$scmProjectUrl"
                    }
                }
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def base = dependenciesNode.appendNode('dependency')
                    base.appendNode('groupId', group)
                    base.appendNode('artifactId', 'commercetools-sdk-java-api-base')
                    base.appendNode('version', version)
                    base.appendNode('scope', 'compile')
                    def modelsBase = dependenciesNode.appendNode('dependency')
                    modelsBase.appendNode('groupId', group)
                    modelsBase.appendNode('artifactId', 'commercetools-sdk-java-api-models-base')
                    modelsBase.appendNode('version', version)
                    modelsBase.appendNode('scope', 'compile')
                }
            })
        }
    }
    assemble.dependsOn("models_$dirname")
}

tasks.register("predicatesJar", Jar) {
    from sourceSets.main.output

    include "**/predicates/**"
    archiveBaseName = project.name + "-predicates"
}
assemble.dependsOn("predicatesJar")
tasks.register("baseJar", Jar) {
    from sourceSets.main.output

    exclude "**/predicates/**", "**/models/**"
    archiveBaseName = project.name + "-base"
}
assemble.dependsOn("baseJar")
tasks.register("modelsBaseJar", Jar) {
    from sourceSets.main.output

    include "**/models/*"
    archiveBaseName = project.name + "-models-base"
}
assemble.dependsOn("modelsBaseJar")

publishing {
    publications {
        MavenModelsBase(MavenPublication) {
            artifact modelsBaseJar
            artifact javadocJar
            groupId group
            artifactId project.name + "-models-base"
            version version

            pom {
                name = project.name + "-models_base"
                description = project.description
                developers {
                    developer {
                        id = "jenschude"
                        name = "Jens Schulze"
                        email = "jens.schulze@commercetools.com"
                    }
                }
                url = scmHttpsUrl
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                scm {
                    connection = "scm:git:$scmHttpsUrl"
                    developerConnection = "scm:git:$scmSshUrl"
                    url = "$scmProjectUrl"
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def base = dependenciesNode.appendNode('dependency')
                base.appendNode('groupId', group)
                base.appendNode('artifactId', 'commercetools-sdk-java-api-base')
                base.appendNode('version', version)
                base.appendNode('scope', 'compile')
            }
        }
        MavenBase(MavenPublication) {
            artifact baseJar
            artifact javadocJar
            groupId group
            artifactId project.name + "-base"
            version version

            pom {
                name = project.name + "-base"
                description = project.description
                developers {
                    developer {
                        id = "jenschude"
                        name = "Jens Schulze"
                        email = "jens.schulze@commercetools.com"
                    }
                }
                url = scmHttpsUrl
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                scm {
                    connection = "scm:git:$scmHttpsUrl"
                    developerConnection = "scm:git:$scmSshUrl"
                    url = "$scmProjectUrl"
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def base = dependenciesNode.appendNode('dependency')
                base.appendNode('groupId', group)
                base.appendNode('artifactId', 'rmf-java-base')
                base.appendNode('version', version)
                base.appendNode('scope', 'compile')
                def money = dependenciesNode.appendNode('dependency')
                money.appendNode('groupId', group)
                money.appendNode('artifactId', 'commercetools-money')
                money.appendNode('version', version)
                money.appendNode('scope', 'compile')
                def jacksonAnno = dependenciesNode.appendNode('dependency')
                jacksonAnno.appendNode('groupId', 'com.fasterxml.jackson.core')
                jacksonAnno.appendNode('artifactId', 'jackson-annotations')
                jacksonAnno.appendNode('version', jackson_core.version)
                jacksonAnno.appendNode('scope', 'compile')
                def jacksonDB = dependenciesNode.appendNode('dependency')
                jacksonDB.appendNode('groupId', 'com.fasterxml.jackson.core')
                jacksonDB.appendNode('artifactId', 'jackson-databind')
                jacksonDB.appendNode('version', jackson_core.version)
                jacksonDB.appendNode('scope', 'compile')
                def slf4jDep = dependenciesNode.appendNode('dependency')
                slf4jDep.appendNode('groupId', 'org.slf4j')
                slf4jDep.appendNode('artifactId', 'slf4j-api')
                slf4jDep.appendNode('version', slf4j.version)
                slf4jDep.appendNode('scope', 'compile')
                def commonsDep = dependenciesNode.appendNode('dependency')
                commonsDep.appendNode('groupId', 'org.apache.commons')
                commonsDep.appendNode('artifactId', 'commons-lang3')
                commonsDep.appendNode('version', commons.lang3version)
                commonsDep.appendNode('scope', 'compile')
                def findBugs = dependenciesNode.appendNode('dependency')
                findBugs.appendNode('groupId', 'com.google.code.findbugs')
                findBugs.appendNode('artifactId', 'jsr305')
                findBugs.appendNode('version', google.findbugsversion)
                findBugs.appendNode('scope', 'runtime')
                def validation = dependenciesNode.appendNode('dependency')
                validation.appendNode('groupId', 'jakarta.validation')
                validation.appendNode('artifactId', 'jakarta.validation-api')
                validation.appendNode('version', javax.validationVersion)
                validation.appendNode('scope', 'runtime')
            }
        }
        MavenPredicates(MavenPublication) {
            artifact predicatesJar
            artifact javadocJar
            groupId group
            artifactId project.name + "-predicates"
            version version

            pom {
                name = project.name + "-predicates"
                description = project.description
                developers {
                    developer {
                        id = "jenschude"
                        name = "Jens Schulze"
                        email = "jens.schulze@commercetools.com"
                    }
                }
                url = scmHttpsUrl
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                scm {
                    connection = "scm:git:$scmHttpsUrl"
                    developerConnection = "scm:git:$scmSshUrl"
                    url = "$scmProjectUrl"
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def base = dependenciesNode.appendNode('dependency')
                base.appendNode('groupId', group)
                base.appendNode('artifactId', 'commercetools-sdk-java-api-base')
                base.appendNode('version', version)
                base.appendNode('scope', 'compile')
            }
        }
    }
}

tasks.register('runMainMethodThreadLeakTest', JavaExec) {
    group = "Execution"
    description = "Run the main method thread leak test class"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "com.commercetools.MainMethodThreadLeakTest"
    timeout = Duration.ofSeconds(20)
}
tasks.register('runMainMethodMemoryLeakTest', JavaExec) {
    group = "Execution"
    description = "Run the main method thread leak test class"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = "com.commercetools.MainMethodMemoryLeakTest"
    maxHeapSize("128m")
}


apply plugin: com.commercetools.sdk.plugins.MigrationInfoPlugin

migration {
    outputFolder = project.projectDir.toPath().resolve("../internal-docs/src/main/java/com/commercetools/docs/meta").toString()
    v1BaseFolder = [
            '/Users/jensschulze/workspace/commercetools-jvm-sdk/commercetools-models/src/main',
            '/Users/jensschulze/workspace/commercetools-jvm-sdk/commercetools-models/target/generated-sources/annotations'
    ]
    v2BaseFolder = [
           project.rootDir.toPath().resolve('commercetools/commercetools-sdk-java-api/src/main/java').toAbsolutePath().toString(),
           project.rootDir.toPath().resolve('commercetools/commercetools-sdk-java-api/src/main/java-generated').toAbsolutePath().toString()
    ]
}
