
package com.commercetools.api.models.message;

import java.time.*;
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.annotation.Nullable;

import com.commercetools.api.models.store.ProductSelectionSetting;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;

import io.vrap.rmf.base.client.utils.Generated;

import jakarta.validation.Valid;

/**
 *  <p>Generated by a successful Add Product Selection, Remove Product Selection, Set Product Selections, or Change Product Selections Active update action.</p>
 *
 * <hr>
 * Example to create an instance using the builder pattern
 * <div class=code-example>
 * <pre><code class='java'>
 *     StoreProductSelectionsChangedMessagePayload storeProductSelectionsChangedMessagePayload = StoreProductSelectionsChangedMessagePayload.builder()
 *             .build()
 * </code></pre>
 * </div>
 */
@Generated(value = "io.vrap.rmf.codegen.rendering.CoreCodeGenerator", comments = "https://github.com/commercetools/rmf-codegen")
@JsonDeserialize(as = StoreProductSelectionsChangedMessagePayloadImpl.class)
public interface StoreProductSelectionsChangedMessagePayload extends MessagePayload {

    /**
     * discriminator value for StoreProductSelectionsChangedMessagePayload
     */
    String STORE_PRODUCT_SELECTIONS_CHANGED = "StoreProductSelectionsChanged";

    /**
     *  <p>ProductSelectionSettings that were added to the Store.</p>
     * @return addedProductSelections
     */
    @Valid
    @JsonProperty("addedProductSelections")
    public List<ProductSelectionSetting> getAddedProductSelections();

    /**
     *  <p>ProductSelectionSettings that were removed from the Store.</p>
     * @return removedProductSelections
     */
    @Valid
    @JsonProperty("removedProductSelections")
    public List<ProductSelectionSetting> getRemovedProductSelections();

    /**
     *  <p>ProductSelectionSettings that were updated in the Store.</p>
     * @return updatedProductSelections
     */
    @Valid
    @JsonProperty("updatedProductSelections")
    public List<ProductSelectionSetting> getUpdatedProductSelections();

    /**
     *  <p>ProductSelectionSettings that were added to the Store.</p>
     * @param addedProductSelections values to be set
     */

    @JsonIgnore
    public void setAddedProductSelections(final ProductSelectionSetting... addedProductSelections);

    /**
     *  <p>ProductSelectionSettings that were added to the Store.</p>
     * @param addedProductSelections values to be set
     */

    public void setAddedProductSelections(final List<ProductSelectionSetting> addedProductSelections);

    /**
     *  <p>ProductSelectionSettings that were removed from the Store.</p>
     * @param removedProductSelections values to be set
     */

    @JsonIgnore
    public void setRemovedProductSelections(final ProductSelectionSetting... removedProductSelections);

    /**
     *  <p>ProductSelectionSettings that were removed from the Store.</p>
     * @param removedProductSelections values to be set
     */

    public void setRemovedProductSelections(final List<ProductSelectionSetting> removedProductSelections);

    /**
     *  <p>ProductSelectionSettings that were updated in the Store.</p>
     * @param updatedProductSelections values to be set
     */

    @JsonIgnore
    public void setUpdatedProductSelections(final ProductSelectionSetting... updatedProductSelections);

    /**
     *  <p>ProductSelectionSettings that were updated in the Store.</p>
     * @param updatedProductSelections values to be set
     */

    public void setUpdatedProductSelections(final List<ProductSelectionSetting> updatedProductSelections);

    /**
     * factory method
     * @return instance of StoreProductSelectionsChangedMessagePayload
     */
    public static StoreProductSelectionsChangedMessagePayload of() {
        return new StoreProductSelectionsChangedMessagePayloadImpl();
    }

    /**
     * factory method to create a shallow copy StoreProductSelectionsChangedMessagePayload
     * @param template instance to be copied
     * @return copy instance
     */
    public static StoreProductSelectionsChangedMessagePayload of(
            final StoreProductSelectionsChangedMessagePayload template) {
        StoreProductSelectionsChangedMessagePayloadImpl instance = new StoreProductSelectionsChangedMessagePayloadImpl();
        instance.setAddedProductSelections(template.getAddedProductSelections());
        instance.setRemovedProductSelections(template.getRemovedProductSelections());
        instance.setUpdatedProductSelections(template.getUpdatedProductSelections());
        return instance;
    }

    /**
     * factory method to create a deep copy of StoreProductSelectionsChangedMessagePayload
     * @param template instance to be copied
     * @return copy instance
     */
    @Nullable
    public static StoreProductSelectionsChangedMessagePayload deepCopy(
            @Nullable final StoreProductSelectionsChangedMessagePayload template) {
        if (template == null) {
            return null;
        }
        StoreProductSelectionsChangedMessagePayloadImpl instance = new StoreProductSelectionsChangedMessagePayloadImpl();
        instance.setAddedProductSelections(Optional.ofNullable(template.getAddedProductSelections())
                .map(t -> t.stream()
                        .map(com.commercetools.api.models.store.ProductSelectionSetting::deepCopy)
                        .collect(Collectors.toList()))
                .orElse(null));
        instance.setRemovedProductSelections(Optional.ofNullable(template.getRemovedProductSelections())
                .map(t -> t.stream()
                        .map(com.commercetools.api.models.store.ProductSelectionSetting::deepCopy)
                        .collect(Collectors.toList()))
                .orElse(null));
        instance.setUpdatedProductSelections(Optional.ofNullable(template.getUpdatedProductSelections())
                .map(t -> t.stream()
                        .map(com.commercetools.api.models.store.ProductSelectionSetting::deepCopy)
                        .collect(Collectors.toList()))
                .orElse(null));
        return instance;
    }

    /**
     * builder factory method for StoreProductSelectionsChangedMessagePayload
     * @return builder
     */
    public static StoreProductSelectionsChangedMessagePayloadBuilder builder() {
        return StoreProductSelectionsChangedMessagePayloadBuilder.of();
    }

    /**
     * create builder for StoreProductSelectionsChangedMessagePayload instance
     * @param template instance with prefilled values for the builder
     * @return builder
     */
    public static StoreProductSelectionsChangedMessagePayloadBuilder builder(
            final StoreProductSelectionsChangedMessagePayload template) {
        return StoreProductSelectionsChangedMessagePayloadBuilder.of(template);
    }

    /**
     * accessor map function
     * @param <T> mapped type
     * @param helper function to map the object
     * @return mapped value
     */
    default <T> T withStoreProductSelectionsChangedMessagePayload(
            Function<StoreProductSelectionsChangedMessagePayload, T> helper) {
        return helper.apply(this);
    }

    /**
     * gives a TypeReference for usage with Jackson DataBind
     * @return TypeReference
     */
    public static com.fasterxml.jackson.core.type.TypeReference<StoreProductSelectionsChangedMessagePayload> typeReference() {
        return new com.fasterxml.jackson.core.type.TypeReference<StoreProductSelectionsChangedMessagePayload>() {
            @Override
            public String toString() {
                return "TypeReference<StoreProductSelectionsChangedMessagePayload>";
            }
        };
    }
}
