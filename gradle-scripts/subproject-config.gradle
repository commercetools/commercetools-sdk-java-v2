test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestApi.extendsFrom(testApi)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath

    options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor false
        noTimestamp = true

        links 'https://docs.oracle.com/javase/8/docs/api/', "https://www.javadoc.io/doc/com.fasterxml.jackson.core/jackson-databind/${versions.jackson}/", 'https://commercetools.github.io/commercetools-jvm-sdk/apidocs/'
        addStringOption('Xdoclint:missing,accessibility', '-quiet')
        addBooleanOption('-allow-script-in-comments', true)
        addBooleanOption('linksource', true)
        addStringOption('source', '8')
        maxMemory = '2g'
    }
}

ext {
    buildInfoPath = "build/generated/src/main/java"
    buildInfoPackage = "io.vrap.rmf.base.client"
}

srcInfo {
    includePackages = [
            "example",
            "commercetools"
    ]
}

tasks.register('integrationTest', Test) {
    description = "Runs integration tests."
    group = "verification"

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter(test)

    testLogging {
        events "failed"
        exceptionFormat "full"

        info {
            events "failed"
            exceptionFormat "full"
        }
    }
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    dependsOn "javadoc"
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}
